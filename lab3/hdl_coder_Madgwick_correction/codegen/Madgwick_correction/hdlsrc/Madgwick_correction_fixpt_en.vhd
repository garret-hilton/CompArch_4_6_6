-- -------------------------------------------------------------
-- 

-- File Name: C:\EELE466\GHC_DDC\lab3\hdl_coder_Madgwick_correction\codegen\Madgwick_correction\hdlsrc\Madgwick_correction_fixpt_en.vhd
-- Created: 2018-02-06 13:35:26
-- 
-- Generated by MATLAB 9.3, MATLAB Coder 3.4 and HDL Coder 3.11
-- 
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Madgwick_correction_fixpt_en
-- Source Path: 
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY Madgwick_correction_fixpt_en IS
  PORT( clk_1                             :   IN    std_logic;
        reset_x_1                         :   IN    std_logic;
        clk_enable_1                      :   IN    std_logic;
        clk_enable_2                      :   OUT   std_logic
        );
END Madgwick_correction_fixpt_en;


ARCHITECTURE rtl OF Madgwick_correction_fixpt_en IS

  -- Signals
  SIGNAL clk_enable_3                     : std_logic;
  SIGNAL ctr0_out                         : std_logic;
  SIGNAL ctr1_out                         : std_logic;
  SIGNAL ctr2_out                         : std_logic;
  SIGNAL ctrstate_out                     : std_logic;
  SIGNAL bypass_out                       : std_logic;
  SIGNAL clk_enable_4                     : std_logic;

BEGIN
  c_c_process: PROCESS (clk_1, reset_x_1)
  BEGIN
    IF reset_x_1 = '1' THEN
      ctr0_out <= '0';
    ELSIF rising_edge(clk_1) THEN
      ctr0_out <= clk_enable_3 AND clk_enable_1;
    END IF;
  END PROCESS c_c_process;

  c_c_1_process: PROCESS (clk_1, reset_x_1)
  BEGIN
    IF reset_x_1 = '1' THEN
      ctr1_out <= '0';
    ELSIF rising_edge(clk_1) THEN
      ctr1_out <= ctr0_out;
    END IF;
  END PROCESS c_c_1_process;

  c_c_2_process: PROCESS (clk_1, reset_x_1)
  BEGIN
    IF reset_x_1 = '1' THEN
      ctr2_out <= '0';
    ELSIF rising_edge(clk_1) THEN
      ctr2_out <= ctr1_out;
    END IF;
  END PROCESS c_c_2_process;

  ctrstate_out <= NOT clk_enable_1 WHEN clk_enable_3 = '1' ELSE
                  ctr2_out;

  c_c_3_process: PROCESS (clk_1, reset_x_1)
  BEGIN
    IF reset_x_1 = '1' THEN
      clk_enable_3 <= '1';
    ELSIF rising_edge(clk_1) THEN
      clk_enable_3 <= ctrstate_out;
    END IF;
  END PROCESS c_c_3_process;

  c_c_4_process: PROCESS (clk_1, reset_x_1)
  BEGIN
    IF reset_x_1 = '1' THEN
      bypass_out <= '0';
    ELSIF rising_edge(clk_1) THEN
      IF clk_enable_3 = '1' THEN
        bypass_out <= clk_enable_1;
      END IF;
    END IF;
  END PROCESS c_c_4_process;

  clk_enable_4 <= clk_enable_1 WHEN clk_enable_3 = '1' ELSE
                  bypass_out;

  clk_enable_2 <= clk_enable_4;

END rtl;


-- -------------------------------------------------------------
-- 

-- File Name: C:\EELE466\GHC_DDC\lab3\hdl_coder_Madgwick_update\Madgwick_update\hdlsrc\Madgwick_update_fixpt.vhd
-- Created: 2018-02-06 13:43:32
-- 
-- Generated by MATLAB 9.3, MATLAB Coder 3.4 and HDL Coder 3.11
-- 
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Design base rate: 0.25
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- q0                            ce_out        1
-- q1                            ce_out        1
-- q2                            ce_out        1
-- q3                            ce_out        1
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Madgwick_update_fixpt
-- Source Path: Madgwick_update_fixpt
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.Madgwick_update_fixpt_pac.ALL;

ENTITY Madgwick_update_fixpt IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        q0_1                              :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14_E8
        q1_1                              :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14_E8
        q2_1                              :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14_E8
        q3_1                              :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14_E8
        qdot1_1                           :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14_E18
        qdot2_1                           :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14_E18
        qdot3_1                           :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14_E18
        qdot4_1                           :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14_E18
        s0                                :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14_E10
        s1                                :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14_E10
        s2                                :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14_E10
        s3                                :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14_E10
        beta                              :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14_En6
        sampletime                        :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14_En23
        ce_out                            :   OUT   std_logic;
        q0                                :   OUT   std_logic_vector(13 DOWNTO 0);  -- sfix14_E8
        q1                                :   OUT   std_logic_vector(13 DOWNTO 0);  -- sfix14_E8
        q2                                :   OUT   std_logic_vector(13 DOWNTO 0);  -- sfix14_E8
        q3                                :   OUT   std_logic_vector(13 DOWNTO 0)  -- sfix14_E8
        );
END Madgwick_update_fixpt;


ARCHITECTURE rtl OF Madgwick_update_fixpt IS

  -- Component Declarations
  COMPONENT Madgwick_update_fixpt_enb_by
    PORT( clk_1                           :   IN    std_logic;
          reset_x_1                       :   IN    std_logic;
          clk_enable_1                    :   IN    std_logic;
          clk_enable_2                    :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT Madgwick_update_fixpt_tc
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          clk_enable                      :   IN    std_logic;
          enb                             :   OUT   std_logic;
          enb_1_4_0                       :   OUT   std_logic;
          enb_1_4_1                       :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : Madgwick_update_fixpt_enb_by
    USE ENTITY work.Madgwick_update_fixpt_enb_by(rtl);

  FOR ALL : Madgwick_update_fixpt_tc
    USE ENTITY work.Madgwick_update_fixpt_tc(rtl);

  -- Functions
  -- HDLCODER_TO_STDLOGIC 
  FUNCTION hdlcoder_to_stdlogic(arg: boolean) RETURN std_logic IS
  BEGIN
    IF arg THEN
      RETURN '1';
    ELSE
      RETURN '0';
    END IF;
  END FUNCTION;


  -- Signals
  SIGNAL enb_1_4_0                        : std_logic;
  SIGNAL enb                              : std_logic;
  SIGNAL enb_1_4_1                        : std_logic;
  SIGNAL q0_1_signed                      : signed(13 DOWNTO 0);  -- sfix14_E8
  SIGNAL tmp                              : signed(28 DOWNTO 0);  -- sfix29_En5
  SIGNAL clk_enable_1                     : std_logic;
  SIGNAL alpha0_deserializer_contl_cnt    : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL alpha0_deserializer_contl_validOutpu : std_logic;
  SIGNAL alpha0_deserializer_innerRegEn   : std_logic;
  SIGNAL alpha0_deserializer_innerRegCtrolEn : std_logic;
  SIGNAL alpha0_deserializer_outBypassEn  : std_logic;
  SIGNAL alpha0_deserializer_tapDelayEn   : std_logic;
  SIGNAL alpha0_deserializer_tapDelayEn_1 : std_logic;
  SIGNAL counterSig                       : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL qdot1_1_signed                   : signed(13 DOWNTO 0);  -- sfix14_E18
  SIGNAL tmp_1                            : signed(28 DOWNTO 0);  -- sfix29_E4
  SIGNAL alpha0_deserializer_contl_cnt_1  : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL alpha0_deserializer_contl_validOutpu_1 : std_logic;
  SIGNAL alpha0_deserializer_innerRegEn_1 : std_logic;
  SIGNAL alpha0_deserializer_innerRegCtrolEn_1 : std_logic;
  SIGNAL alpha0_deserializer_outBypassEn_1 : std_logic;
  SIGNAL alpha0_deserializer_tapDelayEn_2 : std_logic;
  SIGNAL alpha0_deserializer_tapDelayEn_3 : std_logic;
  SIGNAL c0_serial_0                      : vector_of_std_logic_vector14(0 TO 3);  -- ufix14 [4]
  SIGNAL c0_serial_0_1                    : vector_of_unsigned14(0 TO 3);  -- ufix14_En6 [4]
  SIGNAL rcc_out                          : vector_of_unsigned14(0 TO 3);  -- ufix14_En6 [4]
  SIGNAL ratechange_splitcomp_out0        : unsigned(13 DOWNTO 0);  -- ufix14_En6
  SIGNAL ratechange_splitcomp_out1        : unsigned(13 DOWNTO 0);  -- ufix14_En6
  SIGNAL ratechange_splitcomp_out2        : unsigned(13 DOWNTO 0);  -- ufix14_En6
  SIGNAL ratechange_splitcomp_out3        : unsigned(13 DOWNTO 0);  -- ufix14_En6
  SIGNAL beta_1                           : unsigned(13 DOWNTO 0);  -- ufix14_En6
  SIGNAL c0_serial_1                      : vector_of_std_logic_vector14(0 TO 3);  -- ufix14 [4]
  SIGNAL c0_serial_1_1                    : vector_of_signed14(0 TO 3);  -- sfix14_E10 [4]
  SIGNAL rcc_out_1                        : vector_of_signed14(0 TO 3);  -- sfix14_E10 [4]
  SIGNAL ratechange_splitcomp_out0_1      : signed(13 DOWNTO 0);  -- sfix14_E10
  SIGNAL ratechange_splitcomp_out1_1      : signed(13 DOWNTO 0);  -- sfix14_E10
  SIGNAL ratechange_splitcomp_out2_1      : signed(13 DOWNTO 0);  -- sfix14_E10
  SIGNAL ratechange_splitcomp_out3_1      : signed(13 DOWNTO 0);  -- sfix14_E10
  SIGNAL s0_1                             : signed(13 DOWNTO 0);  -- sfix14_E10
  SIGNAL multiplier_cast                  : signed(14 DOWNTO 0);  -- sfix15_En6
  SIGNAL multiplier_mul_temp              : signed(28 DOWNTO 0);  -- sfix29_E4
  SIGNAL tmp_2                            : signed(27 DOWNTO 0);  -- sfix28_E4
  SIGNAL alpha0_deserializer_tapout       : vector_of_signed28(0 TO 2);  -- sfix28_E4 [3]
  SIGNAL alpha0_deserializer_muxOut       : vector_of_signed28(0 TO 3);  -- sfix28_E4 [4]
  SIGNAL c0_serialOut_0                   : vector_of_signed28(0 TO 3);  -- sfix28_E4 [4]
  SIGNAL qdot2_1_signed                   : signed(13 DOWNTO 0);  -- sfix14_E18
  SIGNAL tmp_3                            : signed(28 DOWNTO 0);  -- sfix29_E4
  SIGNAL qdot3_1_signed                   : signed(13 DOWNTO 0);  -- sfix14_E18
  SIGNAL tmp_4                            : signed(28 DOWNTO 0);  -- sfix29_E4
  SIGNAL qdot4_1_signed                   : signed(13 DOWNTO 0);  -- sfix14_E18
  SIGNAL tmp_5                            : signed(28 DOWNTO 0);  -- sfix29_E4
  SIGNAL tmp_6                            : signed(28 DOWNTO 0);  -- sfix29_E4
  SIGNAL tmp_7                            : signed(27 DOWNTO 0);  -- sfix28_E4
  SIGNAL tmp_8                            : signed(28 DOWNTO 0);  -- sfix29_E4
  SIGNAL tmp_9                            : signed(28 DOWNTO 0);  -- sfix29_E4
  SIGNAL tmp_10                           : signed(13 DOWNTO 0);  -- sfix14_E18
  SIGNAL tmp_11                           : signed(28 DOWNTO 0);  -- sfix29_E4
  SIGNAL tmp_12                           : signed(27 DOWNTO 0);  -- sfix28_E4
  SIGNAL tmp_13                           : signed(28 DOWNTO 0);  -- sfix29_E4
  SIGNAL tmp_14                           : signed(28 DOWNTO 0);  -- sfix29_E4
  SIGNAL tmp_15                           : signed(13 DOWNTO 0);  -- sfix14_E18
  SIGNAL tmp_16                           : signed(28 DOWNTO 0);  -- sfix29_E4
  SIGNAL tmp_17                           : signed(27 DOWNTO 0);  -- sfix28_E4
  SIGNAL tmp_18                           : signed(28 DOWNTO 0);  -- sfix29_E4
  SIGNAL tmp_19                           : signed(28 DOWNTO 0);  -- sfix29_E4
  SIGNAL tmp_20                           : signed(13 DOWNTO 0);  -- sfix14_E18
  SIGNAL tmp_21                           : signed(28 DOWNTO 0);  -- sfix29_E4
  SIGNAL tmp_22                           : signed(27 DOWNTO 0);  -- sfix28_E4
  SIGNAL tmp_23                           : signed(28 DOWNTO 0);  -- sfix29_E4
  SIGNAL tmp_24                           : signed(28 DOWNTO 0);  -- sfix29_E4
  SIGNAL tmp_25                           : signed(13 DOWNTO 0);  -- sfix14_E18
  SIGNAL c0_serial_0_2                    : vector_of_signed14(0 TO 3);  -- sfix14_E18 [4]
  SIGNAL rcc_out_2                        : vector_of_signed14(0 TO 3);  -- sfix14_E18 [4]
  SIGNAL ratechange_splitcomp_out0_2      : signed(13 DOWNTO 0);  -- sfix14_E18
  SIGNAL ratechange_splitcomp_out1_2      : signed(13 DOWNTO 0);  -- sfix14_E18
  SIGNAL ratechange_splitcomp_out2_2      : signed(13 DOWNTO 0);  -- sfix14_E18
  SIGNAL ratechange_splitcomp_out3_2      : signed(13 DOWNTO 0);  -- sfix14_E18
  SIGNAL qDot1                            : signed(13 DOWNTO 0);  -- sfix14_E18
  SIGNAL sampletime_unsigned              : unsigned(13 DOWNTO 0);  -- ufix14_En23
  SIGNAL sampleTime_1                     : unsigned(13 DOWNTO 0);  -- ufix14_En23
  SIGNAL c0_serial_1_2                    : vector_of_unsigned14(0 TO 3);  -- ufix14_En23 [4]
  SIGNAL rcc_out_3                        : vector_of_unsigned14(0 TO 3);  -- ufix14_En23 [4]
  SIGNAL ratechange_splitcomp_out0_3      : unsigned(13 DOWNTO 0);  -- ufix14_En23
  SIGNAL ratechange_splitcomp_out1_3      : unsigned(13 DOWNTO 0);  -- ufix14_En23
  SIGNAL ratechange_splitcomp_out2_3      : unsigned(13 DOWNTO 0);  -- ufix14_En23
  SIGNAL ratechange_splitcomp_out3_3      : unsigned(13 DOWNTO 0);  -- ufix14_En23
  SIGNAL sampleTime_2                     : unsigned(13 DOWNTO 0);  -- ufix14_En23
  SIGNAL multiplier_cast_1                : signed(14 DOWNTO 0);  -- sfix15_En23
  SIGNAL multiplier_mul_temp_1            : signed(28 DOWNTO 0);  -- sfix29_En5
  SIGNAL tmp_26                           : signed(27 DOWNTO 0);  -- sfix28_En5
  SIGNAL alpha0_deserializer_tapout_1     : vector_of_signed28(0 TO 2);  -- sfix28_En5 [3]
  SIGNAL alpha0_deserializer_muxOut_1     : vector_of_signed28(0 TO 3);  -- sfix28_En5 [4]
  SIGNAL c0_serialOut_0_1                 : vector_of_signed28(0 TO 3);  -- sfix28_En5 [4]
  SIGNAL delayMatch_reg                   : vector_of_signed29(0 TO 1);  -- sfix29 [2]
  SIGNAL tmp_27                           : signed(28 DOWNTO 0);  -- sfix29_En5
  SIGNAL tmp_28                           : signed(27 DOWNTO 0);  -- sfix28_En5
  SIGNAL tmp_29                           : signed(28 DOWNTO 0);  -- sfix29_En5
  SIGNAL tmp_30                           : signed(28 DOWNTO 0);  -- sfix29_En5
  SIGNAL tmp_31                           : signed(13 DOWNTO 0);  -- sfix14_E8
  SIGNAL q0_tmp                           : signed(13 DOWNTO 0);  -- sfix14_E8
  SIGNAL q1_1_signed                      : signed(13 DOWNTO 0);  -- sfix14_E8
  SIGNAL tmp_32                           : signed(28 DOWNTO 0);  -- sfix29_En5
  SIGNAL delayMatch_reg_1                 : vector_of_signed29(0 TO 1);  -- sfix29 [2]
  SIGNAL tmp_33                           : signed(28 DOWNTO 0);  -- sfix29_En5
  SIGNAL tmp_34                           : signed(27 DOWNTO 0);  -- sfix28_En5
  SIGNAL tmp_35                           : signed(28 DOWNTO 0);  -- sfix29_En5
  SIGNAL tmp_36                           : signed(28 DOWNTO 0);  -- sfix29_En5
  SIGNAL tmp_37                           : signed(13 DOWNTO 0);  -- sfix14_E8
  SIGNAL q1_tmp                           : signed(13 DOWNTO 0);  -- sfix14_E8
  SIGNAL q2_1_signed                      : signed(13 DOWNTO 0);  -- sfix14_E8
  SIGNAL tmp_38                           : signed(28 DOWNTO 0);  -- sfix29_En5
  SIGNAL delayMatch_reg_2                 : vector_of_signed29(0 TO 1);  -- sfix29 [2]
  SIGNAL tmp_39                           : signed(28 DOWNTO 0);  -- sfix29_En5
  SIGNAL tmp_40                           : signed(27 DOWNTO 0);  -- sfix28_En5
  SIGNAL tmp_41                           : signed(28 DOWNTO 0);  -- sfix29_En5
  SIGNAL tmp_42                           : signed(28 DOWNTO 0);  -- sfix29_En5
  SIGNAL tmp_43                           : signed(13 DOWNTO 0);  -- sfix14_E8
  SIGNAL q2_tmp                           : signed(13 DOWNTO 0);  -- sfix14_E8
  SIGNAL q3_1_signed                      : signed(13 DOWNTO 0);  -- sfix14_E8
  SIGNAL tmp_44                           : signed(28 DOWNTO 0);  -- sfix29_En5
  SIGNAL delayMatch_reg_3                 : vector_of_signed29(0 TO 1);  -- sfix29 [2]
  SIGNAL tmp_45                           : signed(28 DOWNTO 0);  -- sfix29_En5
  SIGNAL tmp_46                           : signed(27 DOWNTO 0);  -- sfix28_En5
  SIGNAL tmp_47                           : signed(28 DOWNTO 0);  -- sfix29_En5
  SIGNAL tmp_48                           : signed(28 DOWNTO 0);  -- sfix29_En5
  SIGNAL tmp_49                           : signed(13 DOWNTO 0);  -- sfix14_E8
  SIGNAL q3_tmp                           : signed(13 DOWNTO 0);  -- sfix14_E8

BEGIN
  UMadgwick_update_fixpt_enb_b : Madgwick_update_fixpt_enb_by
    PORT MAP( clk_1 => clk,
              reset_x_1 => reset_x,
              clk_enable_1 => clk_enable,
              clk_enable_2 => clk_enable_1
              );

  UMadgwick_update_fixpt_tc_1 : Madgwick_update_fixpt_tc
    PORT MAP( clk => clk,
              reset_x => reset_x,
              clk_enable => clk_enable_1,
              enb => enb,
              enb_1_4_0 => enb_1_4_0,
              enb_1_4_1 => enb_1_4_1
              );

  -- HDL code generation from MATLAB function: Madgwick_update_fixpt
  -- 
  -- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  -- 
  --                                                                          %
  -- 
  --           Generated by MATLAB 9.3 and Fixed-Point Designer 6.0           %
  -- 
  --                                                                          %
  -- 
  -- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  -- 
  -- Apply feedback step
  -- 
  -- 'Madgwick_update_fixpt:9' fm = get_fimath();
  -- 
  -- 'Madgwick_update_fixpt:10' q0 = fi(q0_1, 1, 14, -8, fm);
  q0_1_signed <= signed(q0_1);

  -- Integrate rate of change of quaternion to yield quaternion
  -- 
  -- 'Madgwick_update_fixpt:25' q0 = fi(q0 + qDot1 * sampleTime, 1, 14, -8, fm);
  tmp <= resize(q0_1_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 
    29);

  alpha0_deserializer_contl_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      alpha0_deserializer_contl_cnt <= to_unsigned(16#0#, 3);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        IF alpha0_deserializer_contl_cnt = to_unsigned(16#3#, 3) THEN 
          alpha0_deserializer_contl_cnt <= to_unsigned(16#0#, 3);
        ELSE 
          alpha0_deserializer_contl_cnt <= alpha0_deserializer_contl_cnt + to_unsigned(16#1#, 3);
        END IF;
      END IF;
    END IF;
  END PROCESS alpha0_deserializer_contl_process;

  alpha0_deserializer_tapDelayEn <= hdlcoder_to_stdlogic(alpha0_deserializer_contl_cnt < to_unsigned(16#3#, 
    3));
  
  alpha0_deserializer_contl_validOutpu <= '1' WHEN alpha0_deserializer_contl_cnt = to_unsigned(16#3#, 3) ELSE
      '0';
  
  alpha0_deserializer_innerRegEn <= '1' WHEN alpha0_deserializer_contl_validOutpu = '1' ELSE
      '0';
  
  alpha0_deserializer_innerRegCtrolEn <= '1' WHEN alpha0_deserializer_contl_validOutpu = '1' ELSE
      '0';
  alpha0_deserializer_outBypassEn <= '1';

  alpha0_deserializer_tapDelayEn_1 <= enb AND alpha0_deserializer_tapDelayEn;

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 3
  ctr_0_3_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      counterSig <= to_unsigned(16#0#, 2);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        counterSig <= counterSig + to_unsigned(16#1#, 2);
      END IF;
    END IF;
  END PROCESS ctr_0_3_process;


  -- 'Madgwick_update_fixpt:14' qDot1 = fi(qDot1_1, 1, 14, -18, fm);
  qdot1_1_signed <= signed(qdot1_1);

  -- 'Madgwick_update_fixpt:19' qDot1 = fi(qDot1 - beta * s0, 1, 14, -18, fm);
  tmp_1 <= resize(qdot1_1_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & 
    '0' & '0', 29);

  alpha0_deserializer_contl_1_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      alpha0_deserializer_contl_cnt_1 <= to_unsigned(16#0#, 3);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        IF alpha0_deserializer_contl_cnt_1 = to_unsigned(16#3#, 3) THEN 
          alpha0_deserializer_contl_cnt_1 <= to_unsigned(16#0#, 3);
        ELSE 
          alpha0_deserializer_contl_cnt_1 <= alpha0_deserializer_contl_cnt_1 + to_unsigned(16#1#, 3);
        END IF;
      END IF;
    END IF;
  END PROCESS alpha0_deserializer_contl_1_process;

  alpha0_deserializer_tapDelayEn_2 <= hdlcoder_to_stdlogic(alpha0_deserializer_contl_cnt_1 < 
    to_unsigned(16#3#, 3));
  
  alpha0_deserializer_contl_validOutpu_1 <= '1' WHEN alpha0_deserializer_contl_cnt_1 = to_unsigned(16#3#, 3) 
    ELSE
      '0';
  
  alpha0_deserializer_innerRegEn_1 <= '1' WHEN alpha0_deserializer_contl_validOutpu_1 = '1' ELSE
      '0';
  
  alpha0_deserializer_innerRegCtrolEn_1 <= '1' WHEN alpha0_deserializer_contl_validOutpu_1 = '1' ELSE
      '0';
  alpha0_deserializer_outBypassEn_1 <= '1';

  alpha0_deserializer_tapDelayEn_3 <= enb AND alpha0_deserializer_tapDelayEn_2;

  c0_serial_0(0) <= beta;
  c0_serial_0(1) <= beta;
  c0_serial_0(2) <= beta;
  c0_serial_0(3) <= beta;

  outputgen1: FOR kk IN 0 TO 3 GENERATE
    c0_serial_0_1(kk) <= unsigned(c0_serial_0(kk));
  END GENERATE;

  rcc_out <= c0_serial_0_1;

  ratechange_splitcomp_out0 <= rcc_out(0);

  ratechange_splitcomp_out1 <= rcc_out(1);

  ratechange_splitcomp_out2 <= rcc_out(2);

  ratechange_splitcomp_out3 <= rcc_out(3);

  
  beta_1 <= ratechange_splitcomp_out0 WHEN counterSig = to_unsigned(16#0#, 2) ELSE
      ratechange_splitcomp_out1 WHEN counterSig = to_unsigned(16#1#, 2) ELSE
      ratechange_splitcomp_out2 WHEN counterSig = to_unsigned(16#2#, 2) ELSE
      ratechange_splitcomp_out3;

  c0_serial_1(0) <= s0;
  c0_serial_1(1) <= s1;
  c0_serial_1(2) <= s2;
  c0_serial_1(3) <= s3;

  outputgen: FOR kk IN 0 TO 3 GENERATE
    c0_serial_1_1(kk) <= signed(c0_serial_1(kk));
  END GENERATE;

  rcc_out_1 <= c0_serial_1_1;

  ratechange_splitcomp_out0_1 <= rcc_out_1(0);

  ratechange_splitcomp_out1_1 <= rcc_out_1(1);

  ratechange_splitcomp_out2_1 <= rcc_out_1(2);

  ratechange_splitcomp_out3_1 <= rcc_out_1(3);

  
  s0_1 <= ratechange_splitcomp_out0_1 WHEN counterSig = to_unsigned(16#0#, 2) ELSE
      ratechange_splitcomp_out1_1 WHEN counterSig = to_unsigned(16#1#, 2) ELSE
      ratechange_splitcomp_out2_1 WHEN counterSig = to_unsigned(16#2#, 2) ELSE
      ratechange_splitcomp_out3_1;

  multiplier_cast <= signed(resize(beta_1, 15));
  multiplier_mul_temp <= multiplier_cast * s0_1;
  tmp_2 <= multiplier_mul_temp(27 DOWNTO 0);

  alpha0_deserializer_tapDelayComp_pro : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      alpha0_deserializer_tapout <= (OTHERS => to_signed(16#0000000#, 28));
    ELSIF rising_edge(clk) THEN
      IF enb = '1' AND alpha0_deserializer_tapDelayEn_3 = '1' THEN
        alpha0_deserializer_tapout(2) <= tmp_2;
        alpha0_deserializer_tapout(0 TO 1) <= alpha0_deserializer_tapout(1 TO 2);
      END IF;
    END IF;
  END PROCESS alpha0_deserializer_tapDelayComp_pro;


  alpha0_deserializer_muxOut(0) <= alpha0_deserializer_tapout(0);
  alpha0_deserializer_muxOut(1) <= alpha0_deserializer_tapout(1);
  alpha0_deserializer_muxOut(2) <= alpha0_deserializer_tapout(2);
  alpha0_deserializer_muxOut(3) <= tmp_2;

  alpha0_deserializer_regComp_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      c0_serialOut_0 <= (OTHERS => to_signed(16#0000000#, 28));
    ELSIF rising_edge(clk) THEN
      IF enb = '1' AND alpha0_deserializer_innerRegEn_1 = '1' THEN
        c0_serialOut_0 <= alpha0_deserializer_muxOut;
      END IF;
    END IF;
  END PROCESS alpha0_deserializer_regComp_process;


  -- 'Madgwick_update_fixpt:15' qDot2 = fi(qDot2_1, 1, 14, -18, fm);
  qdot2_1_signed <= signed(qdot2_1);

  -- 'Madgwick_update_fixpt:20' qDot2 = fi(qDot2 - beta * s1, 1, 14, -18, fm);
  tmp_3 <= resize(qdot2_1_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & 
    '0' & '0', 29);

  -- 'Madgwick_update_fixpt:16' qDot3 = fi(qDot3_1, 1, 14, -18, fm);
  qdot3_1_signed <= signed(qdot3_1);

  -- 'Madgwick_update_fixpt:21' qDot3 = fi(qDot3 - beta * s2, 1, 14, -18, fm);
  tmp_4 <= resize(qdot3_1_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & 
    '0' & '0', 29);

  -- 'Madgwick_update_fixpt:17' qDot4 = fi(qDot4_1, 1, 14, -18, fm);
  qdot4_1_signed <= signed(qdot4_1);

  -- 'Madgwick_update_fixpt:22' qDot4 = fi(qDot4 - beta * s3, 1, 14, -18, fm);
  tmp_5 <= resize(qdot4_1_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & 
    '0' & '0', 29);

  delayMatch_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      tmp_6 <= to_signed(16#00000000#, 29);
    ELSIF rising_edge(clk) THEN
      IF enb_1_4_0 = '1' THEN
        tmp_6 <= tmp_1;
      END IF;
    END IF;
  END PROCESS delayMatch_process;


  tmp_7 <= c0_serialOut_0(0);

  tmp_8 <= resize(tmp_7, 29);

  tmp_9 <= tmp_6 - tmp_8;

  tmp_10 <= tmp_9(27 DOWNTO 14);

  delayMatch_1_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      tmp_11 <= to_signed(16#00000000#, 29);
    ELSIF rising_edge(clk) THEN
      IF enb_1_4_0 = '1' THEN
        tmp_11 <= tmp_3;
      END IF;
    END IF;
  END PROCESS delayMatch_1_process;


  tmp_12 <= c0_serialOut_0(1);

  tmp_13 <= resize(tmp_12, 29);

  tmp_14 <= tmp_11 - tmp_13;

  tmp_15 <= tmp_14(27 DOWNTO 14);

  delayMatch_2_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      tmp_16 <= to_signed(16#00000000#, 29);
    ELSIF rising_edge(clk) THEN
      IF enb_1_4_0 = '1' THEN
        tmp_16 <= tmp_4;
      END IF;
    END IF;
  END PROCESS delayMatch_2_process;


  tmp_17 <= c0_serialOut_0(2);

  tmp_18 <= resize(tmp_17, 29);

  tmp_19 <= tmp_16 - tmp_18;

  tmp_20 <= tmp_19(27 DOWNTO 14);

  delayMatch_3_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      tmp_21 <= to_signed(16#00000000#, 29);
    ELSIF rising_edge(clk) THEN
      IF enb_1_4_0 = '1' THEN
        tmp_21 <= tmp_5;
      END IF;
    END IF;
  END PROCESS delayMatch_3_process;


  tmp_22 <= c0_serialOut_0(3);

  tmp_23 <= resize(tmp_22, 29);

  tmp_24 <= tmp_21 - tmp_23;

  tmp_25 <= tmp_24(27 DOWNTO 14);

  c0_serial_0_2(0) <= tmp_10;
  c0_serial_0_2(1) <= tmp_15;
  c0_serial_0_2(2) <= tmp_20;
  c0_serial_0_2(3) <= tmp_25;

  rcc_out_2 <= c0_serial_0_2;

  ratechange_splitcomp_out0_2 <= rcc_out_2(0);

  ratechange_splitcomp_out1_2 <= rcc_out_2(1);

  ratechange_splitcomp_out2_2 <= rcc_out_2(2);

  ratechange_splitcomp_out3_2 <= rcc_out_2(3);

  
  qDot1 <= ratechange_splitcomp_out0_2 WHEN counterSig = to_unsigned(16#0#, 2) ELSE
      ratechange_splitcomp_out1_2 WHEN counterSig = to_unsigned(16#1#, 2) ELSE
      ratechange_splitcomp_out2_2 WHEN counterSig = to_unsigned(16#2#, 2) ELSE
      ratechange_splitcomp_out3_2;

  sampletime_unsigned <= unsigned(sampletime);

  delayMatch_4_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      sampleTime_1 <= to_unsigned(16#0000#, 14);
    ELSIF rising_edge(clk) THEN
      IF enb_1_4_0 = '1' THEN
        sampleTime_1 <= sampletime_unsigned;
      END IF;
    END IF;
  END PROCESS delayMatch_4_process;


  c0_serial_1_2(0) <= sampleTime_1;
  c0_serial_1_2(1) <= sampleTime_1;
  c0_serial_1_2(2) <= sampleTime_1;
  c0_serial_1_2(3) <= sampleTime_1;

  rcc_out_3 <= c0_serial_1_2;

  ratechange_splitcomp_out0_3 <= rcc_out_3(0);

  ratechange_splitcomp_out1_3 <= rcc_out_3(1);

  ratechange_splitcomp_out2_3 <= rcc_out_3(2);

  ratechange_splitcomp_out3_3 <= rcc_out_3(3);

  
  sampleTime_2 <= ratechange_splitcomp_out0_3 WHEN counterSig = to_unsigned(16#0#, 2) ELSE
      ratechange_splitcomp_out1_3 WHEN counterSig = to_unsigned(16#1#, 2) ELSE
      ratechange_splitcomp_out2_3 WHEN counterSig = to_unsigned(16#2#, 2) ELSE
      ratechange_splitcomp_out3_3;

  multiplier_cast_1 <= signed(resize(sampleTime_2, 15));
  multiplier_mul_temp_1 <= qDot1 * multiplier_cast_1;
  tmp_26 <= multiplier_mul_temp_1(27 DOWNTO 0);

  alpha0_deserializer_tapDelayComp_1_p : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      alpha0_deserializer_tapout_1 <= (OTHERS => to_signed(16#0000000#, 28));
    ELSIF rising_edge(clk) THEN
      IF enb = '1' AND alpha0_deserializer_tapDelayEn_1 = '1' THEN
        alpha0_deserializer_tapout_1(2) <= tmp_26;
        alpha0_deserializer_tapout_1(0 TO 1) <= alpha0_deserializer_tapout_1(1 TO 2);
      END IF;
    END IF;
  END PROCESS alpha0_deserializer_tapDelayComp_1_p;


  alpha0_deserializer_muxOut_1(0) <= alpha0_deserializer_tapout_1(0);
  alpha0_deserializer_muxOut_1(1) <= alpha0_deserializer_tapout_1(1);
  alpha0_deserializer_muxOut_1(2) <= alpha0_deserializer_tapout_1(2);
  alpha0_deserializer_muxOut_1(3) <= tmp_26;

  alpha0_deserializer_regComp_1_proces : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      c0_serialOut_0_1 <= (OTHERS => to_signed(16#0000000#, 28));
    ELSIF rising_edge(clk) THEN
      IF enb = '1' AND alpha0_deserializer_innerRegEn = '1' THEN
        c0_serialOut_0_1 <= alpha0_deserializer_muxOut_1;
      END IF;
    END IF;
  END PROCESS alpha0_deserializer_regComp_1_proces;


  delayMatch_5_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      delayMatch_reg <= (OTHERS => to_signed(16#00000000#, 29));
    ELSIF rising_edge(clk) THEN
      IF enb_1_4_0 = '1' THEN
        delayMatch_reg(0) <= tmp;
        delayMatch_reg(1) <= delayMatch_reg(0);
      END IF;
    END IF;
  END PROCESS delayMatch_5_process;

  tmp_27 <= delayMatch_reg(1);

  tmp_28 <= c0_serialOut_0_1(0);

  tmp_29 <= resize(tmp_28, 29);

  tmp_30 <= tmp_27 + tmp_29;

  tmp_31 <= tmp_30(26 DOWNTO 13);

  q0_reg_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      q0_tmp <= to_signed(16#0000#, 14);
    ELSIF rising_edge(clk) THEN
      IF enb_1_4_0 = '1' THEN
        q0_tmp <= tmp_31;
      END IF;
    END IF;
  END PROCESS q0_reg_process;


  q0 <= std_logic_vector(q0_tmp);

  -- 'Madgwick_update_fixpt:11' q1 = fi(q1_1, 1, 14, -8, fm);
  q1_1_signed <= signed(q1_1);

  -- 'Madgwick_update_fixpt:26' q1 = fi(q1 + qDot2 * sampleTime, 1, 14, -8, fm);
  tmp_32 <= resize(q1_1_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 
    29);

  delayMatch_6_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      delayMatch_reg_1 <= (OTHERS => to_signed(16#00000000#, 29));
    ELSIF rising_edge(clk) THEN
      IF enb_1_4_0 = '1' THEN
        delayMatch_reg_1(0) <= tmp_32;
        delayMatch_reg_1(1) <= delayMatch_reg_1(0);
      END IF;
    END IF;
  END PROCESS delayMatch_6_process;

  tmp_33 <= delayMatch_reg_1(1);

  tmp_34 <= c0_serialOut_0_1(1);

  tmp_35 <= resize(tmp_34, 29);

  tmp_36 <= tmp_33 + tmp_35;

  tmp_37 <= tmp_36(26 DOWNTO 13);

  q1_reg_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      q1_tmp <= to_signed(16#0000#, 14);
    ELSIF rising_edge(clk) THEN
      IF enb_1_4_0 = '1' THEN
        q1_tmp <= tmp_37;
      END IF;
    END IF;
  END PROCESS q1_reg_process;


  q1 <= std_logic_vector(q1_tmp);

  -- 'Madgwick_update_fixpt:12' q2 = fi(q2_1, 1, 14, -8, fm);
  q2_1_signed <= signed(q2_1);

  -- 'Madgwick_update_fixpt:27' q2 = fi(q2 + qDot3 * sampleTime, 1, 14, -8, fm);
  tmp_38 <= resize(q2_1_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 
    29);

  delayMatch_7_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      delayMatch_reg_2 <= (OTHERS => to_signed(16#00000000#, 29));
    ELSIF rising_edge(clk) THEN
      IF enb_1_4_0 = '1' THEN
        delayMatch_reg_2(0) <= tmp_38;
        delayMatch_reg_2(1) <= delayMatch_reg_2(0);
      END IF;
    END IF;
  END PROCESS delayMatch_7_process;

  tmp_39 <= delayMatch_reg_2(1);

  tmp_40 <= c0_serialOut_0_1(2);

  tmp_41 <= resize(tmp_40, 29);

  tmp_42 <= tmp_39 + tmp_41;

  tmp_43 <= tmp_42(26 DOWNTO 13);

  q2_reg_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      q2_tmp <= to_signed(16#0000#, 14);
    ELSIF rising_edge(clk) THEN
      IF enb_1_4_0 = '1' THEN
        q2_tmp <= tmp_43;
      END IF;
    END IF;
  END PROCESS q2_reg_process;


  q2 <= std_logic_vector(q2_tmp);

  -- 'Madgwick_update_fixpt:13' q3 = fi(q3_1, 1, 14, -8, fm);
  q3_1_signed <= signed(q3_1);

  -- 'Madgwick_update_fixpt:28' q3 = fi(q3 + qDot4 * sampleTime, 1, 14, -8, fm);
  tmp_44 <= resize(q3_1_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 
    29);

  delayMatch_8_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      delayMatch_reg_3 <= (OTHERS => to_signed(16#00000000#, 29));
    ELSIF rising_edge(clk) THEN
      IF enb_1_4_0 = '1' THEN
        delayMatch_reg_3(0) <= tmp_44;
        delayMatch_reg_3(1) <= delayMatch_reg_3(0);
      END IF;
    END IF;
  END PROCESS delayMatch_8_process;

  tmp_45 <= delayMatch_reg_3(1);

  tmp_46 <= c0_serialOut_0_1(3);

  tmp_47 <= resize(tmp_46, 29);

  tmp_48 <= tmp_45 + tmp_47;

  tmp_49 <= tmp_48(26 DOWNTO 13);

  q3_reg_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      q3_tmp <= to_signed(16#0000#, 14);
    ELSIF rising_edge(clk) THEN
      IF enb_1_4_0 = '1' THEN
        q3_tmp <= tmp_49;
      END IF;
    END IF;
  END PROCESS q3_reg_process;


  q3 <= std_logic_vector(q3_tmp);

  ce_out <= enb_1_4_1;

END rtl;


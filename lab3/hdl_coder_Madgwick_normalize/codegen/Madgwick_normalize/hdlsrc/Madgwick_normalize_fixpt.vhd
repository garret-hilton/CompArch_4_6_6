-- -------------------------------------------------------------
-- 

-- File Name: C:\EELE466\GHC_DDC\lab3\hdl_coder_Madgwick_normalize\codegen\Madgwick_normalize\hdlsrc\Madgwick_normalize_fixpt.vhd
-- Created: 2018-02-06 13:07:56
-- 
-- Generated by MATLAB 9.3, MATLAB Coder 3.4 and HDL Coder 3.11
-- 
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Design base rate: 0.25
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ax                            ce_out        1
-- ay                            ce_out        1
-- az                            ce_out        1
-- a0                            ce_out        1
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Madgwick_normalize_fixpt
-- Source Path: Madgwick_normalize_fixpt
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.Madgwick_normalize_fixpt_pac.ALL;

ENTITY Madgwick_normalize_fixpt IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        ax_1                              :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14_En5
        ay_1                              :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14_En5
        az_1                              :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14_En5
        a0_1                              :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14_En5
        ce_out                            :   OUT   std_logic;
        ax                                :   OUT   std_logic_vector(13 DOWNTO 0);  -- sfix14_En5
        ay                                :   OUT   std_logic_vector(13 DOWNTO 0);  -- sfix14_En5
        az                                :   OUT   std_logic_vector(13 DOWNTO 0);  -- sfix14_En5
        a0                                :   OUT   std_logic_vector(13 DOWNTO 0)  -- sfix14_En5
        );
END Madgwick_normalize_fixpt;


ARCHITECTURE rtl OF Madgwick_normalize_fixpt IS

  -- Component Declarations
  COMPONENT Madgwick_normalize_fixpt_enb
    PORT( clk_1                           :   IN    std_logic;
          reset_x_1                       :   IN    std_logic;
          clk_enable_1                    :   IN    std_logic;
          clk_enable_2                    :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT Madgwick_normalize_fixpt_tc
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          clk_enable                      :   IN    std_logic;
          enb                             :   OUT   std_logic;
          enb_1_2_0                       :   OUT   std_logic;
          enb_1_4_0                       :   OUT   std_logic;
          enb_1_4_1                       :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : Madgwick_normalize_fixpt_enb
    USE ENTITY work.Madgwick_normalize_fixpt_enb(rtl);

  FOR ALL : Madgwick_normalize_fixpt_tc
    USE ENTITY work.Madgwick_normalize_fixpt_tc(rtl);

  -- Constants
  CONSTANT One                            : unsigned(22 DOWNTO 0) := 
    to_unsigned(16#400000#, 23);  -- ufix23
  CONSTANT C_divbyzero_p                  : unsigned(22 DOWNTO 0) := 
    to_unsigned(16#7FFFFF#, 23);  -- ufix23
  CONSTANT One_2                          : signed(30 DOWNTO 0) := 
    to_signed(16#20000000#, 31);  -- sfix31
  CONSTANT C_divbyzero_p_2                : signed(30 DOWNTO 0) := 
    to_signed(16#3FFFFFFF#, 31);  -- sfix31

  -- Functions
  -- HDLCODER_TO_STDLOGIC 
  FUNCTION hdlcoder_to_stdlogic(arg: boolean) RETURN std_logic IS
  BEGIN
    IF arg THEN
      RETURN '1';
    ELSE
      RETURN '0';
    END IF;
  END FUNCTION;


  -- Signals
  SIGNAL enb_1_4_0                        : std_logic;
  SIGNAL enb                              : std_logic;
  SIGNAL enb_1_2_0                        : std_logic;
  SIGNAL enb_1_4_1                        : std_logic;
  SIGNAL a0_1_signed                      : signed(13 DOWNTO 0);  -- sfix14_En5
  SIGNAL tmp                              : std_logic;
  SIGNAL clk_enable_1                     : std_logic;
  SIGNAL reduced_reg                      : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL tmp_1                            : std_logic;
  SIGNAL tmp_2                            : std_logic;
  SIGNAL alpha0_deserializer_contl_cnt    : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL alpha0_deserializer_contl_validOutpu : std_logic;
  SIGNAL alpha0_deserializer_innerRegEn   : std_logic;
  SIGNAL alpha0_deserializer_innerRegCtrolEn : std_logic;
  SIGNAL alpha0_deserializer_outBypassEn  : std_logic;
  SIGNAL alpha0_deserializer_tapDelayEn   : std_logic;
  SIGNAL alpha0_deserializer_tapDelayEn_1 : std_logic;
  SIGNAL counterSig                       : std_logic;  -- ufix1
  SIGNAL ay_1_signed                      : signed(13 DOWNTO 0);  -- sfix14_En5
  SIGNAL reduced_reg_1                    : vector_of_signed14(0 TO 1);  -- sfix14 [2]
  SIGNAL ay_2                             : signed(13 DOWNTO 0);  -- sfix14_En5
  SIGNAL ax_1_signed                      : signed(13 DOWNTO 0);  -- sfix14_En5
  SIGNAL reduced_reg_2                    : vector_of_signed14(0 TO 1);  -- sfix14 [2]
  SIGNAL ax_2                             : signed(13 DOWNTO 0);  -- sfix14_En5
  SIGNAL c0_serial_0                      : vector_of_signed14(0 TO 1);  -- sfix14_En5 [2]
  SIGNAL rcc_out                          : vector_of_signed14(0 TO 1);  -- sfix14_En5 [2]
  SIGNAL ratechange_splitcomp_out0        : signed(13 DOWNTO 0);  -- sfix14_En5
  SIGNAL ratechange_splitcomp_out1        : signed(13 DOWNTO 0);  -- sfix14_En5
  SIGNAL ay_3                             : signed(13 DOWNTO 0);  -- sfix14_En5
  SIGNAL alpha0_deserializer_contl_cnt_1  : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL alpha0_deserializer_contl_validOutpu_1 : std_logic;
  SIGNAL alpha0_deserializer_innerRegEn_1 : std_logic;
  SIGNAL alpha0_deserializer_innerRegCtrolEn_1 : std_logic;
  SIGNAL alpha0_deserializer_outBypassEn_1 : std_logic;
  SIGNAL alpha0_deserializer_tapDelayEn_2 : std_logic;
  SIGNAL alpha0_deserializer_tapDelayEn_3 : std_logic;
  SIGNAL counterSig_1                     : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL c0_serial_0_1                    : vector_of_signed14(0 TO 3);  -- sfix14_En5 [4]
  SIGNAL rcc_out_1                        : vector_of_signed14(0 TO 3);  -- sfix14_En5 [4]
  SIGNAL ratechange_splitcomp_out0_1      : signed(13 DOWNTO 0);  -- sfix14_En5
  SIGNAL ratechange_splitcomp_out1_1      : signed(13 DOWNTO 0);  -- sfix14_En5
  SIGNAL ratechange_splitcomp_out2        : signed(13 DOWNTO 0);  -- sfix14_En5
  SIGNAL ratechange_splitcomp_out3        : signed(13 DOWNTO 0);  -- sfix14_En5
  SIGNAL ax_3                             : signed(13 DOWNTO 0);  -- sfix14_En5
  SIGNAL c0_serial_1                      : vector_of_signed14(0 TO 3);  -- sfix14_En5 [4]
  SIGNAL rcc_out_2                        : vector_of_signed14(0 TO 3);  -- sfix14_En5 [4]
  SIGNAL ratechange_splitcomp_out0_2      : signed(13 DOWNTO 0);  -- sfix14_En5
  SIGNAL ratechange_splitcomp_out1_2      : signed(13 DOWNTO 0);  -- sfix14_En5
  SIGNAL ratechange_splitcomp_out2_1      : signed(13 DOWNTO 0);  -- sfix14_En5
  SIGNAL ratechange_splitcomp_out3_1      : signed(13 DOWNTO 0);  -- sfix14_En5
  SIGNAL ax_4                             : signed(13 DOWNTO 0);  -- sfix14_En5
  SIGNAL tmp_3                            : signed(27 DOWNTO 0);  -- sfix28_En10
  SIGNAL alpha0_deserializer_tapout       : vector_of_signed28(0 TO 2);  -- sfix28_En10 [3]
  SIGNAL alpha0_deserializer_muxOut       : vector_of_signed28(0 TO 3);  -- sfix28_En10 [4]
  SIGNAL c0_serialOut_0                   : vector_of_signed28(0 TO 3);  -- sfix28_En10 [4]
  SIGNAL tmp_4                            : signed(27 DOWNTO 0);  -- sfix28_En10
  SIGNAL tmp_5                            : signed(28 DOWNTO 0);  -- sfix29_En10
  SIGNAL tmp_6                            : signed(27 DOWNTO 0);  -- sfix28_En10
  SIGNAL tmp_7                            : signed(28 DOWNTO 0);  -- sfix29_En10
  SIGNAL tmp_8                            : signed(28 DOWNTO 0);  -- sfix29_En10
  SIGNAL tmp_9                            : signed(29 DOWNTO 0);  -- sfix30_En10
  SIGNAL alpha0_deserializer_contl_cnt_2  : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL alpha0_deserializer_contl_validOutpu_2 : std_logic;
  SIGNAL alpha0_deserializer_innerRegEn_2 : std_logic;
  SIGNAL alpha0_deserializer_innerRegCtrolEn_2 : std_logic;
  SIGNAL alpha0_deserializer_outBypassEn_2 : std_logic;
  SIGNAL alpha0_deserializer_tapDelayEn_4 : std_logic;
  SIGNAL alpha0_deserializer_tapDelayEn_5 : std_logic;
  SIGNAL az_1_signed                      : signed(13 DOWNTO 0);  -- sfix14_En5
  SIGNAL az_2                             : signed(13 DOWNTO 0);  -- sfix14_En5
  SIGNAL az_3                             : signed(14 DOWNTO 0);  -- sfix15
  SIGNAL az_4                             : signed(14 DOWNTO 0);  -- sfix15
  SIGNAL a0_2                             : signed(13 DOWNTO 0);  -- sfix14_En5
  SIGNAL a0_3                             : signed(14 DOWNTO 0);  -- sfix15
  SIGNAL az_5                             : signed(13 DOWNTO 0);  -- sfix14_En5
  SIGNAL az_6                             : signed(14 DOWNTO 0);  -- sfix15
  SIGNAL c0_serial_0_2                    : vector_of_signed15(0 TO 3);  -- sfix15 [4]
  SIGNAL rcc_out_3                        : vector_of_signed15(0 TO 3);  -- sfix15 [4]
  SIGNAL ratechange_splitcomp_out0_3      : signed(14 DOWNTO 0);  -- sfix15
  SIGNAL ratechange_splitcomp_out1_3      : signed(14 DOWNTO 0);  -- sfix15
  SIGNAL ratechange_splitcomp_out2_2      : signed(14 DOWNTO 0);  -- sfix15
  SIGNAL ratechange_splitcomp_out3_2      : signed(14 DOWNTO 0);  -- sfix15
  SIGNAL az_7                             : signed(14 DOWNTO 0);  -- sfix15
  SIGNAL az_8                             : signed(14 DOWNTO 0);  -- sfix15
  SIGNAL az_9                             : signed(14 DOWNTO 0);  -- sfix15
  SIGNAL a0_4                             : signed(14 DOWNTO 0);  -- sfix15
  SIGNAL tmp_10                           : unsigned(31 DOWNTO 0);  -- ufix32_En24
  SIGNAL tmp_11                           : unsigned(31 DOWNTO 0);  -- ufix32_En24
  SIGNAL tmp_12                           : signed(27 DOWNTO 0);  -- sfix28_En10
  SIGNAL tmp_13                           : signed(28 DOWNTO 0);  -- sfix29_En10
  SIGNAL tmp_14                           : signed(27 DOWNTO 0);  -- sfix28_En10
  SIGNAL tmp_15                           : signed(28 DOWNTO 0);  -- sfix29_En10
  SIGNAL tmp_16                           : signed(28 DOWNTO 0);  -- sfix29_En10
  SIGNAL tmp_17                           : signed(29 DOWNTO 0);  -- sfix30_En10
  SIGNAL tmp_18                           : signed(29 DOWNTO 0);  -- sfix30_En10
  SIGNAL y_y                              : unsigned(6 DOWNTO 0);  -- ufix7_E2
  SIGNAL delayMatch_reg                   : vector_of_unsigned7(0 TO 1);  -- ufix7 [2]
  SIGNAL y_y_1                            : unsigned(6 DOWNTO 0);  -- ufix7_E2
  SIGNAL c_c_6                            : unsigned(31 DOWNTO 0);  -- ufix32_En24
  SIGNAL delayMatch_reg_1                 : vector_of_unsigned32(0 TO 1);  -- ufix32 [2]
  SIGNAL c_c_7                            : unsigned(31 DOWNTO 0);  -- ufix32_En24
  SIGNAL alpha0_deserializer_tapout_1     : vector_of_signed29(0 TO 2);  -- sfix29 [3]
  SIGNAL rcc_out_4                        : vector_of_signed15(0 TO 3);  -- sfix15 [4]
  SIGNAL ratechange_splitcomp_out3_3      : signed(14 DOWNTO 0);  -- sfix15
  SIGNAL ratechange_splitcomp_out2_3      : signed(14 DOWNTO 0);  -- sfix15
  SIGNAL ratechange_splitcomp_out1_4      : signed(14 DOWNTO 0);  -- sfix15
  SIGNAL tmp_19                           : unsigned(6 DOWNTO 0);  -- ufix7_E2
  SIGNAL c_c_8                            : unsigned(31 DOWNTO 0);  -- ufix32_En24
  SIGNAL p0c_div_temp                     : unsigned(22 DOWNTO 0);  -- ufix23_En24
  SIGNAL tmp_20                           : unsigned(13 DOWNTO 0);  -- ufix14_E4
  SIGNAL y_y_2                            : unsigned(6 DOWNTO 0);  -- ufix7_E2
  SIGNAL c0_serialOut_0_1                 : vector_of_signed29(0 TO 3);  -- sfix29 [4]
  SIGNAL tmp_22                           : signed(28 DOWNTO 0);  -- sfix29
  SIGNAL tmp_23                           : signed(27 DOWNTO 0);  -- sfix28_En10
  SIGNAL tmp_24                           : signed(29 DOWNTO 0);  -- sfix30_En10
  SIGNAL tmp_25                           : signed(29 DOWNTO 0);  -- sfix30_En10
  SIGNAL tmp_26                           : std_logic;
  SIGNAL tmp_27                           : std_logic;
  SIGNAL tmp_28                           : unsigned(31 DOWNTO 0);  -- ufix32_En24
  SIGNAL tmp_29                           : unsigned(31 DOWNTO 0);  -- ufix32_En24
  SIGNAL tmp_30                           : unsigned(13 DOWNTO 0);  -- ufix14_En18
  SIGNAL recipNorm                        : signed(14 DOWNTO 0);  -- sfix15
  SIGNAL c0_serial_1_1                    : vector_of_signed15(0 TO 3);  -- sfix15 [4]
  SIGNAL ratechange_splitcomp_out0_4      : signed(14 DOWNTO 0);  -- sfix15
  SIGNAL az_10                            : signed(14 DOWNTO 0);  -- sfix15
  SIGNAL multiplier_mul_temp              : signed(29 DOWNTO 0);  -- sfix30
  SIGNAL tmp_31                           : signed(28 DOWNTO 0);  -- sfix29
  SIGNAL alpha0_deserializer_muxOut_1     : vector_of_signed29(0 TO 3);  -- sfix29 [4]
  SIGNAL tmp_32                           : signed(29 DOWNTO 0);  -- sfix30_En10
  SIGNAL tmp_33                           : signed(28 DOWNTO 0);  -- sfix29
  SIGNAL tmp_34                           : signed(27 DOWNTO 0);  -- sfix28_En10
  SIGNAL tmp_35                           : signed(29 DOWNTO 0);  -- sfix30_En10
  SIGNAL tmp_36                           : signed(29 DOWNTO 0);  -- sfix30_En10
  SIGNAL tmp_37                           : signed(30 DOWNTO 0);  -- sfix31_En10
  SIGNAL tmp_38                           : signed(28 DOWNTO 0);  -- sfix29
  SIGNAL tmp_39                           : signed(27 DOWNTO 0);  -- sfix28_En10
  SIGNAL tmp_40                           : signed(30 DOWNTO 0);  -- sfix31_En10
  SIGNAL tmp_41                           : signed(30 DOWNTO 0);  -- sfix31_En10
  SIGNAL tmp_42                           : std_logic;
  SIGNAL y_y_3                            : signed(15 DOWNTO 0);  -- sfix16_En5
  SIGNAL y_y_4                            : signed(15 DOWNTO 0);  -- sfix16_En5
  SIGNAL delayMatch_reg_2                 : vector_of_signed16(0 TO 1);  -- sfix16 [2]
  SIGNAL y_y_5                            : signed(15 DOWNTO 0);  -- sfix16_En5
  SIGNAL tmp_44                           : signed(15 DOWNTO 0);  -- sfix16_En5
  SIGNAL tmp_45                           : std_logic;
  SIGNAL c_c_15                           : signed(35 DOWNTO 0);  -- sfix36_En24
  SIGNAL p0c_div_temp_1                   : signed(30 DOWNTO 0);  -- sfix31_En24
  SIGNAL c_c_16                           : signed(35 DOWNTO 0);  -- sfix36_En24
  SIGNAL delayMatch_reg_3                 : vector_of_signed36(0 TO 1);  -- sfix36 [2]
  SIGNAL c_c_17                           : signed(35 DOWNTO 0);  -- sfix36_En24
  SIGNAL tmp_46                           : signed(35 DOWNTO 0);  -- sfix36_En24
  SIGNAL tmp_47                           : signed(35 DOWNTO 0);  -- sfix36_En24
  SIGNAL delayMatch_reg_4                 : vector_of_signed36(0 TO 1);  -- sfix36 [2]
  SIGNAL tmp_48                           : signed(35 DOWNTO 0);  -- sfix36_En24
  SIGNAL tmp_49                           : signed(35 DOWNTO 0);  -- sfix36_En24
  SIGNAL tmp_50                           : unsigned(13 DOWNTO 0);  -- ufix14_En18
  SIGNAL tmp_51                           : unsigned(13 DOWNTO 0);  -- ufix14_En18
  SIGNAL c0_serial_1_2                    : vector_of_unsigned14(0 TO 1);  -- ufix14_En18 [2]
  SIGNAL rcc_out_5                        : vector_of_unsigned14(0 TO 1);  -- ufix14_En18 [2]
  SIGNAL ratechange_splitcomp_out0_5      : unsigned(13 DOWNTO 0);  -- ufix14_En18
  SIGNAL ratechange_splitcomp_out1_5      : unsigned(13 DOWNTO 0);  -- ufix14_En18
  SIGNAL recipNorm_1                      : unsigned(13 DOWNTO 0);  -- ufix14_En18
  SIGNAL multiplier_cast                  : signed(14 DOWNTO 0);  -- sfix15_En18
  SIGNAL multiplier_mul_temp_1            : signed(28 DOWNTO 0);  -- sfix29_En23
  SIGNAL tmp_52                           : signed(27 DOWNTO 0);  -- sfix28_En23
  SIGNAL alpha0_deserializer_tapout_2     : signed(27 DOWNTO 0);  -- sfix28_En23
  SIGNAL alpha0_deserializer_muxOut_2     : vector_of_signed28(0 TO 1);  -- sfix28_En23 [2]
  SIGNAL c0_serialOut_0_2                 : vector_of_signed28(0 TO 1);  -- sfix28_En23 [2]
  SIGNAL tmp_53                           : signed(27 DOWNTO 0);  -- sfix28_En23
  SIGNAL tmp_54                           : signed(13 DOWNTO 0);  -- sfix14_En5
  SIGNAL tmp_55                           : signed(13 DOWNTO 0);  -- sfix14_En5
  SIGNAL delayMatch_reg_5                 : vector_of_signed14(0 TO 2);  -- sfix14 [3]
  SIGNAL tmp_56                           : signed(13 DOWNTO 0);  -- sfix14_En5
  SIGNAL tmp_57                           : std_logic;
  SIGNAL p13tmp_cast                      : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL tmp_58                           : std_logic;
  SIGNAL alpha0_deserializer_contl_cnt_3  : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL alpha0_deserializer_contl_validOutpu_3 : std_logic;
  SIGNAL alpha0_deserializer_innerRegEn_3 : std_logic;
  SIGNAL alpha0_deserializer_innerRegCtrolEn_3 : std_logic;
  SIGNAL alpha0_deserializer_outBypassEn_3 : std_logic;
  SIGNAL alpha0_deserializer_tapDelayEn_6 : std_logic;
  SIGNAL alpha0_deserializer_tapDelayEn_7 : std_logic;
  SIGNAL a0_5                             : signed(13 DOWNTO 0);  -- sfix14_En5
  SIGNAL az_11                            : signed(13 DOWNTO 0);  -- sfix14_En5
  SIGNAL c0_serial_0_3                    : vector_of_signed14(0 TO 3);  -- sfix14_En5 [4]
  SIGNAL rcc_out_6                        : vector_of_signed14(0 TO 3);  -- sfix14_En5 [4]
  SIGNAL ratechange_splitcomp_out0_6      : signed(13 DOWNTO 0);  -- sfix14_En5
  SIGNAL ratechange_splitcomp_out1_6      : signed(13 DOWNTO 0);  -- sfix14_En5
  SIGNAL ratechange_splitcomp_out2_4      : signed(13 DOWNTO 0);  -- sfix14_En5
  SIGNAL ratechange_splitcomp_out3_4      : signed(13 DOWNTO 0);  -- sfix14_En5
  SIGNAL ay_4                             : signed(13 DOWNTO 0);  -- sfix14_En5
  SIGNAL tmp_59                           : unsigned(13 DOWNTO 0);  -- ufix14_En18
  SIGNAL tmp_60                           : unsigned(13 DOWNTO 0);  -- ufix14_En18
  SIGNAL tmp_61                           : unsigned(13 DOWNTO 0);  -- ufix14_En18
  SIGNAL tmp_62                           : unsigned(13 DOWNTO 0);  -- ufix14_En18
  SIGNAL c0_serial_1_3                    : vector_of_unsigned14(0 TO 3);  -- ufix14_En18 [4]
  SIGNAL rcc_out_7                        : vector_of_unsigned14(0 TO 3);  -- ufix14_En18 [4]
  SIGNAL ratechange_splitcomp_out0_7      : unsigned(13 DOWNTO 0);  -- ufix14_En18
  SIGNAL ratechange_splitcomp_out1_7      : unsigned(13 DOWNTO 0);  -- ufix14_En18
  SIGNAL ratechange_splitcomp_out2_5      : unsigned(13 DOWNTO 0);  -- ufix14_En18
  SIGNAL ratechange_splitcomp_out3_5      : unsigned(13 DOWNTO 0);  -- ufix14_En18
  SIGNAL recipNorm_2                      : unsigned(13 DOWNTO 0);  -- ufix14_En18
  SIGNAL multiplier_cast_1                : signed(14 DOWNTO 0);  -- sfix15_En18
  SIGNAL multiplier_mul_temp_2            : signed(28 DOWNTO 0);  -- sfix29_En23
  SIGNAL tmp_63                           : signed(27 DOWNTO 0);  -- sfix28_En23
  SIGNAL alpha0_deserializer_tapout_3     : vector_of_signed28(0 TO 2);  -- sfix28_En23 [3]
  SIGNAL alpha0_deserializer_muxOut_3     : vector_of_signed28(0 TO 3);  -- sfix28_En23 [4]
  SIGNAL c0_serialOut_0_3                 : vector_of_signed28(0 TO 3);  -- sfix28_En23 [4]
  SIGNAL ax_5                             : signed(13 DOWNTO 0);  -- sfix14_En5
  SIGNAL tmp_64                           : signed(27 DOWNTO 0);  -- sfix28_En23
  SIGNAL tmp_65                           : signed(13 DOWNTO 0);  -- sfix14_En5
  SIGNAL tmp_66                           : signed(13 DOWNTO 0);  -- sfix14_En5
  SIGNAL tmp_67                           : signed(13 DOWNTO 0);  -- sfix14_En5
  SIGNAL tmp_68                           : signed(13 DOWNTO 0);  -- sfix14_En5
  SIGNAL ax_tmp                           : signed(13 DOWNTO 0);  -- sfix14_En5
  SIGNAL tmp_69                           : signed(27 DOWNTO 0);  -- sfix28_En23
  SIGNAL tmp_70                           : signed(13 DOWNTO 0);  -- sfix14_En5
  SIGNAL tmp_71                           : signed(13 DOWNTO 0);  -- sfix14_En5
  SIGNAL delayMatch_reg_6                 : vector_of_signed14(0 TO 2);  -- sfix14 [3]
  SIGNAL tmp_72                           : signed(13 DOWNTO 0);  -- sfix14_En5
  SIGNAL tmp_73                           : std_logic;
  SIGNAL p13tmp_cast_1                    : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL tmp_74                           : std_logic;
  SIGNAL ay_5                             : signed(13 DOWNTO 0);  -- sfix14_En5
  SIGNAL tmp_75                           : signed(27 DOWNTO 0);  -- sfix28_En23
  SIGNAL tmp_76                           : signed(13 DOWNTO 0);  -- sfix14_En5
  SIGNAL tmp_77                           : signed(13 DOWNTO 0);  -- sfix14_En5
  SIGNAL tmp_78                           : signed(13 DOWNTO 0);  -- sfix14_En5
  SIGNAL tmp_79                           : signed(13 DOWNTO 0);  -- sfix14_En5
  SIGNAL ay_tmp                           : signed(13 DOWNTO 0);  -- sfix14_En5
  SIGNAL tmp_80                           : signed(27 DOWNTO 0);  -- sfix28_En23
  SIGNAL tmp_81                           : signed(13 DOWNTO 0);  -- sfix14_En5
  SIGNAL tmp_82                           : signed(13 DOWNTO 0);  -- sfix14_En5
  SIGNAL delayMatch_reg_7                 : vector_of_signed14(0 TO 2);  -- sfix14 [3]
  SIGNAL tmp_83                           : signed(13 DOWNTO 0);  -- sfix14_En5
  SIGNAL tmp_84                           : std_logic;
  SIGNAL p13tmp_cast_2                    : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL tmp_85                           : std_logic;
  SIGNAL az_12                            : signed(13 DOWNTO 0);  -- sfix14_En5
  SIGNAL tmp_86                           : signed(28 DOWNTO 0);  -- sfix29
  SIGNAL tmp_87                           : signed(27 DOWNTO 0);  -- sfix28_En23
  SIGNAL tmp_88                           : signed(13 DOWNTO 0);  -- sfix14_En5
  SIGNAL tmp_89                           : signed(13 DOWNTO 0);  -- sfix14_En5
  SIGNAL tmp_90                           : signed(13 DOWNTO 0);  -- sfix14_En5
  SIGNAL tmp_91                           : signed(13 DOWNTO 0);  -- sfix14_En5
  SIGNAL az_tmp                           : signed(13 DOWNTO 0);  -- sfix14_En5
  SIGNAL tmp_92                           : signed(27 DOWNTO 0);  -- sfix28_En23
  SIGNAL tmp_93                           : signed(13 DOWNTO 0);  -- sfix14_En5
  SIGNAL tmp_94                           : signed(13 DOWNTO 0);  -- sfix14_En5
  SIGNAL delayMatch_reg_8                 : vector_of_signed14(0 TO 1);  -- sfix14 [2]
  SIGNAL tmp_95                           : signed(13 DOWNTO 0);  -- sfix14_En5
  SIGNAL tmp_96                           : std_logic;
  SIGNAL p3tmp_cast                       : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL a0_6                             : signed(13 DOWNTO 0);  -- sfix14_En5
  SIGNAL delayMatch_reg_9                 : vector_of_signed14(0 TO 1);  -- sfix14 [2]
  SIGNAL a0_7                             : signed(13 DOWNTO 0);  -- sfix14_En5
  SIGNAL tmp_97                           : signed(13 DOWNTO 0);  -- sfix14_En5
  SIGNAL tmp_98                           : signed(13 DOWNTO 0);  -- sfix14_En5
  SIGNAL a0_8                             : signed(13 DOWNTO 0);  -- sfix14_En5
  SIGNAL tmp_99                           : signed(13 DOWNTO 0);  -- sfix14_En5
  SIGNAL a0_tmp                           : signed(13 DOWNTO 0);  -- sfix14_En5

BEGIN
  UMadgwick_normalize_fixpt_en : Madgwick_normalize_fixpt_enb
    PORT MAP( clk_1 => clk,
              reset_x_1 => reset_x,
              clk_enable_1 => clk_enable,
              clk_enable_2 => clk_enable_1
              );

  UMadgwick_normalize_fixpt_tc : Madgwick_normalize_fixpt_tc
    PORT MAP( clk => clk,
              reset_x => reset_x,
              clk_enable => clk_enable_1,
              enb => enb,
              enb_1_2_0 => enb_1_2_0,
              enb_1_4_0 => enb_1_4_0,
              enb_1_4_1 => enb_1_4_1
              );

  -- 'Madgwick_normalize_fixpt:37' x = fi(fi_div(fi(1, 0, 1, 0, fm), (sqrt(y))), 0, 14, 18, fm);
  -- 
  -- 'Madgwick_normalize_fixpt:35' fm = get_fimath();
  -- 
  
-- 'Madgwick_normalize_fixpt:25' recipNorm = fi(invSqrt(ax * ax + ay * ay + az * az + a0 * a0), 0, 14, 18, fm);
  -- 
  -- 'Madgwick_normalize_fixpt:24' else
  -- 
  -- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  -- 
  --                                                                          %
  -- 
  --           Generated by MATLAB 9.3 and Fixed-Point Designer 6.0           %
  -- 
  --                                                                          %
  -- 
  -- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  -- 
  -- Normalize accelerometer measurement
  -- 
  -- 'Madgwick_normalize_fixpt:9' fm = get_fimath();
  -- 
  -- 'Madgwick_normalize_fixpt:10' a0 = fi(a0_1, 1, 14, 5, fm);
  a0_1_signed <= signed(a0_1);

  -- 'Madgwick_normalize_fixpt:15' if a0 == fi(0, 0, 1, 0, fm)
  
  tmp <= '1' WHEN a0_1_signed = to_signed(16#0000#, 14) ELSE
      '0';

  reduced_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      reduced_reg <= (OTHERS => '0');
    ELSIF rising_edge(clk) THEN
      IF enb_1_4_0 = '1' THEN
        reduced_reg(0) <= tmp;
        reduced_reg(1) <= reduced_reg(0);
      END IF;
    END IF;
  END PROCESS reduced_process;

  tmp_1 <= reduced_reg(1);

  reduced_1_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      tmp_2 <= '0';
    ELSIF rising_edge(clk) THEN
      IF enb_1_4_0 = '1' THEN
        tmp_2 <= tmp_1;
      END IF;
    END IF;
  END PROCESS reduced_1_process;


  alpha0_deserializer_contl_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      alpha0_deserializer_contl_cnt <= to_unsigned(16#0#, 2);
    ELSIF rising_edge(clk) THEN
      IF enb_1_2_0 = '1' THEN
        IF alpha0_deserializer_contl_cnt = to_unsigned(16#1#, 2) THEN 
          alpha0_deserializer_contl_cnt <= to_unsigned(16#0#, 2);
        ELSE 
          alpha0_deserializer_contl_cnt <= alpha0_deserializer_contl_cnt + to_unsigned(16#1#, 2);
        END IF;
      END IF;
    END IF;
  END PROCESS alpha0_deserializer_contl_process;

  alpha0_deserializer_tapDelayEn <= hdlcoder_to_stdlogic(alpha0_deserializer_contl_cnt < to_unsigned(16#1#, 
    2));
  
  alpha0_deserializer_contl_validOutpu <= '1' WHEN alpha0_deserializer_contl_cnt = to_unsigned(16#1#, 2) ELSE
      '0';
  
  alpha0_deserializer_innerRegEn <= '1' WHEN alpha0_deserializer_contl_validOutpu = '1' ELSE
      '0';
  
  alpha0_deserializer_innerRegCtrolEn <= '1' WHEN alpha0_deserializer_contl_validOutpu = '1' ELSE
      '0';
  alpha0_deserializer_outBypassEn <= '1';

  alpha0_deserializer_tapDelayEn_1 <= enb_1_2_0 AND alpha0_deserializer_tapDelayEn;

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 1
  ctr_0_1_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      counterSig <= '0';
    ELSIF rising_edge(clk) THEN
      IF enb_1_2_0 = '1' THEN
        counterSig <=  NOT counterSig;
      END IF;
    END IF;
  END PROCESS ctr_0_1_process;


  -- 'Madgwick_normalize_fixpt:12' ay = fi(ay_1, 1, 14, 5, fm);
  ay_1_signed <= signed(ay_1);

  reduced_2_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      reduced_reg_1 <= (OTHERS => to_signed(16#0000#, 14));
    ELSIF rising_edge(clk) THEN
      IF enb_1_4_0 = '1' THEN
        reduced_reg_1(0) <= ay_1_signed;
        reduced_reg_1(1) <= reduced_reg_1(0);
      END IF;
    END IF;
  END PROCESS reduced_2_process;

  ay_2 <= reduced_reg_1(1);

  -- 'Madgwick_normalize_fixpt:11' ax = fi(ax_1, 1, 14, 5, fm);
  ax_1_signed <= signed(ax_1);

  reduced_3_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      reduced_reg_2 <= (OTHERS => to_signed(16#0000#, 14));
    ELSIF rising_edge(clk) THEN
      IF enb_1_4_0 = '1' THEN
        reduced_reg_2(0) <= ax_1_signed;
        reduced_reg_2(1) <= reduced_reg_2(0);
      END IF;
    END IF;
  END PROCESS reduced_3_process;

  ax_2 <= reduced_reg_2(1);

  c0_serial_0(0) <= ay_2;
  c0_serial_0(1) <= ax_2;

  rcc_out <= c0_serial_0;

  ratechange_splitcomp_out0 <= rcc_out(0);

  ratechange_splitcomp_out1 <= rcc_out(1);

  
  ay_3 <= ratechange_splitcomp_out0 WHEN counterSig = '0' ELSE
      ratechange_splitcomp_out1;

  alpha0_deserializer_contl_1_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      alpha0_deserializer_contl_cnt_1 <= to_unsigned(16#0#, 3);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        IF alpha0_deserializer_contl_cnt_1 = to_unsigned(16#3#, 3) THEN 
          alpha0_deserializer_contl_cnt_1 <= to_unsigned(16#0#, 3);
        ELSE 
          alpha0_deserializer_contl_cnt_1 <= alpha0_deserializer_contl_cnt_1 + to_unsigned(16#1#, 3);
        END IF;
      END IF;
    END IF;
  END PROCESS alpha0_deserializer_contl_1_process;

  alpha0_deserializer_tapDelayEn_2 <= hdlcoder_to_stdlogic(alpha0_deserializer_contl_cnt_1 < 
    to_unsigned(16#3#, 3));
  
  alpha0_deserializer_contl_validOutpu_1 <= '1' WHEN alpha0_deserializer_contl_cnt_1 = to_unsigned(16#3#, 3) 
    ELSE
      '0';
  
  alpha0_deserializer_innerRegEn_1 <= '1' WHEN alpha0_deserializer_contl_validOutpu_1 = '1' ELSE
      '0';
  
  alpha0_deserializer_innerRegCtrolEn_1 <= '1' WHEN alpha0_deserializer_contl_validOutpu_1 = '1' ELSE
      '0';
  alpha0_deserializer_outBypassEn_1 <= '1';

  alpha0_deserializer_tapDelayEn_3 <= enb AND alpha0_deserializer_tapDelayEn_2;

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 3
  ctr_0_3_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      counterSig_1 <= to_unsigned(16#0#, 2);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        counterSig_1 <= counterSig_1 + to_unsigned(16#1#, 2);
      END IF;
    END IF;
  END PROCESS ctr_0_3_process;


  c0_serial_0_1(0) <= ax_1_signed;
  c0_serial_0_1(1) <= ax_1_signed;
  c0_serial_0_1(2) <= ay_1_signed;
  c0_serial_0_1(3) <= ay_1_signed;

  rcc_out_1 <= c0_serial_0_1;

  ratechange_splitcomp_out0_1 <= rcc_out_1(0);

  ratechange_splitcomp_out1_1 <= rcc_out_1(1);

  ratechange_splitcomp_out2 <= rcc_out_1(2);

  ratechange_splitcomp_out3 <= rcc_out_1(3);

  
  ax_3 <= ratechange_splitcomp_out0_1 WHEN counterSig_1 = to_unsigned(16#0#, 2) ELSE
      ratechange_splitcomp_out1_1 WHEN counterSig_1 = to_unsigned(16#1#, 2) ELSE
      ratechange_splitcomp_out2 WHEN counterSig_1 = to_unsigned(16#2#, 2) ELSE
      ratechange_splitcomp_out3;

  c0_serial_1(0) <= ax_1_signed;
  c0_serial_1(1) <= ax_1_signed;
  c0_serial_1(2) <= ay_1_signed;
  c0_serial_1(3) <= ay_1_signed;

  rcc_out_2 <= c0_serial_1;

  ratechange_splitcomp_out0_2 <= rcc_out_2(0);

  ratechange_splitcomp_out1_2 <= rcc_out_2(1);

  ratechange_splitcomp_out2_1 <= rcc_out_2(2);

  ratechange_splitcomp_out3_1 <= rcc_out_2(3);

  
  ax_4 <= ratechange_splitcomp_out0_2 WHEN counterSig_1 = to_unsigned(16#0#, 2) ELSE
      ratechange_splitcomp_out1_2 WHEN counterSig_1 = to_unsigned(16#1#, 2) ELSE
      ratechange_splitcomp_out2_1 WHEN counterSig_1 = to_unsigned(16#2#, 2) ELSE
      ratechange_splitcomp_out3_1;

  tmp_3 <= ax_3 * ax_4;

  alpha0_deserializer_tapDelayComp_pro : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      alpha0_deserializer_tapout <= (OTHERS => to_signed(16#0000000#, 28));
    ELSIF rising_edge(clk) THEN
      IF enb = '1' AND alpha0_deserializer_tapDelayEn_3 = '1' THEN
        alpha0_deserializer_tapout(2) <= tmp_3;
        alpha0_deserializer_tapout(0 TO 1) <= alpha0_deserializer_tapout(1 TO 2);
      END IF;
    END IF;
  END PROCESS alpha0_deserializer_tapDelayComp_pro;


  alpha0_deserializer_muxOut(0) <= alpha0_deserializer_tapout(0);
  alpha0_deserializer_muxOut(1) <= alpha0_deserializer_tapout(1);
  alpha0_deserializer_muxOut(2) <= alpha0_deserializer_tapout(2);
  alpha0_deserializer_muxOut(3) <= tmp_3;

  alpha0_deserializer_regComp_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      c0_serialOut_0 <= (OTHERS => to_signed(16#0000000#, 28));
    ELSIF rising_edge(clk) THEN
      IF enb = '1' AND alpha0_deserializer_innerRegEn_1 = '1' THEN
        c0_serialOut_0 <= alpha0_deserializer_muxOut;
      END IF;
    END IF;
  END PROCESS alpha0_deserializer_regComp_process;


  tmp_4 <= c0_serialOut_0(0);

  tmp_5 <= resize(tmp_4, 29);

  tmp_6 <= c0_serialOut_0(2);

  tmp_7 <= resize(tmp_6, 29);

  tmp_8 <= tmp_5 + tmp_7;

  tmp_9 <= resize(tmp_8, 30);

  alpha0_deserializer_contl_2_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      alpha0_deserializer_contl_cnt_2 <= to_unsigned(16#0#, 3);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        IF alpha0_deserializer_contl_cnt_2 = to_unsigned(16#3#, 3) THEN 
          alpha0_deserializer_contl_cnt_2 <= to_unsigned(16#0#, 3);
        ELSE 
          alpha0_deserializer_contl_cnt_2 <= alpha0_deserializer_contl_cnt_2 + to_unsigned(16#1#, 3);
        END IF;
      END IF;
    END IF;
  END PROCESS alpha0_deserializer_contl_2_process;

  alpha0_deserializer_tapDelayEn_4 <= hdlcoder_to_stdlogic(alpha0_deserializer_contl_cnt_2 < 
    to_unsigned(16#3#, 3));
  
  alpha0_deserializer_contl_validOutpu_2 <= '1' WHEN alpha0_deserializer_contl_cnt_2 = to_unsigned(16#3#, 3) 
    ELSE
      '0';
  
  alpha0_deserializer_innerRegEn_2 <= '1' WHEN alpha0_deserializer_contl_validOutpu_2 = '1' ELSE
      '0';
  
  alpha0_deserializer_innerRegCtrolEn_2 <= '1' WHEN alpha0_deserializer_contl_validOutpu_2 = '1' ELSE
      '0';
  alpha0_deserializer_outBypassEn_2 <= '1';

  alpha0_deserializer_tapDelayEn_5 <= enb AND alpha0_deserializer_tapDelayEn_4;

  -- 'Madgwick_normalize_fixpt:13' az = fi(az_1, 1, 14, 5, fm);
  az_1_signed <= signed(az_1);

  reduced_4_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      az_2 <= to_signed(16#0000#, 14);
    ELSIF rising_edge(clk) THEN
      IF enb_1_4_0 = '1' THEN
        az_2 <= az_1_signed;
      END IF;
    END IF;
  END PROCESS reduced_4_process;


  az_3 <= resize(az_2, 15);

  az_4 <= resize(az_2, 15);

  reduced_5_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      a0_2 <= to_signed(16#0000#, 14);
    ELSIF rising_edge(clk) THEN
      IF enb_1_4_0 = '1' THEN
        a0_2 <= a0_1_signed;
      END IF;
    END IF;
  END PROCESS reduced_5_process;


  a0_3 <= resize(a0_2, 15);

  delayMatch_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      az_5 <= to_signed(16#0000#, 14);
    ELSIF rising_edge(clk) THEN
      IF enb_1_4_0 = '1' THEN
        az_5 <= az_2;
      END IF;
    END IF;
  END PROCESS delayMatch_process;


  az_6 <= resize(az_5, 15);

  c0_serial_0_2(0) <= az_3;
  c0_serial_0_2(1) <= az_4;
  c0_serial_0_2(2) <= a0_3;
  c0_serial_0_2(3) <= az_6;

  rcc_out_3 <= c0_serial_0_2;

  ratechange_splitcomp_out0_3 <= rcc_out_3(0);

  ratechange_splitcomp_out1_3 <= rcc_out_3(1);

  ratechange_splitcomp_out2_2 <= rcc_out_3(2);

  ratechange_splitcomp_out3_2 <= rcc_out_3(3);

  
  az_7 <= ratechange_splitcomp_out0_3 WHEN counterSig_1 = to_unsigned(16#0#, 2) ELSE
      ratechange_splitcomp_out1_3 WHEN counterSig_1 = to_unsigned(16#1#, 2) ELSE
      ratechange_splitcomp_out2_2 WHEN counterSig_1 = to_unsigned(16#2#, 2) ELSE
      ratechange_splitcomp_out3_2;

  az_8 <= resize(az_2, 15);

  az_9 <= resize(az_2, 15);

  a0_4 <= resize(a0_2, 15);

  tmp_10 <= to_unsigned(0, 32);

  delayMatch_1_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      tmp_11 <= to_unsigned(0, 32);
    ELSIF rising_edge(clk) THEN
      IF enb_1_4_0 = '1' THEN
        tmp_11 <= tmp_10;
      END IF;
    END IF;
  END PROCESS delayMatch_1_process;


  tmp_12 <= c0_serialOut_0(1);

  tmp_13 <= resize(tmp_12, 29);

  tmp_14 <= c0_serialOut_0(3);

  tmp_15 <= resize(tmp_14, 29);

  tmp_16 <= tmp_13 + tmp_15;

  tmp_17 <= resize(tmp_16, 30);

  delayMatch_2_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      tmp_18 <= to_signed(16#00000000#, 30);
    ELSIF rising_edge(clk) THEN
      IF enb_1_4_0 = '1' THEN
        tmp_18 <= tmp_17;
      END IF;
    END IF;
  END PROCESS delayMatch_2_process;


  -- HDL code generation from MATLAB function: Madgwick_normalize_fixpt_trueregionp81
  y_y <= to_unsigned(16#00#, 7);

  delayMatch_3_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      delayMatch_reg <= (OTHERS => to_unsigned(16#00#, 7));
    ELSIF rising_edge(clk) THEN
      IF enb_1_4_0 = '1' THEN
        delayMatch_reg(0) <= y_y;
        delayMatch_reg(1) <= delayMatch_reg(0);
      END IF;
    END IF;
  END PROCESS delayMatch_3_process;

  y_y_1 <= delayMatch_reg(1);

  -- HDL code generation from MATLAB function: Madgwick_normalize_fixpt_trueregionp72_trueregionp1
  c_c_6 <= unsigned'(X"FFFFFFFF");

  delayMatch_4_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      delayMatch_reg_1 <= (OTHERS => to_unsigned(0, 32));
    ELSIF rising_edge(clk) THEN
      IF enb_1_4_0 = '1' THEN
        delayMatch_reg_1(0) <= c_c_6;
        delayMatch_reg_1(1) <= delayMatch_reg_1(0);
      END IF;
    END IF;
  END PROCESS delayMatch_4_process;

  c_c_7 <= delayMatch_reg_1(1);

  ratechange_splitcomp_out3_3 <= rcc_out_4(3);

  ratechange_splitcomp_out2_3 <= rcc_out_4(2);

  ratechange_splitcomp_out1_4 <= rcc_out_4(1);

  -- HDL code generation from MATLAB function: Madgwick_normalize_fixpt_trueregionp72_falseregionp1
  
  p0c_div_temp <= C_divbyzero_p WHEN tmp_19 = 0 ELSE
      One / tmp_19;
  c_c_8 <= resize(p0c_div_temp, 32);

  -- HDL code generation from MATLAB function: Madgwick_normalize_fixpt_falseregionp81
  p1_output : PROCESS (tmp_20)
    VARIABLE yy : unsigned(6 DOWNTO 0);
    VARIABLE tmp21 : unsigned(6 DOWNTO 0);
    VARIABLE y_0 : unsigned(6 DOWNTO 0);
    VARIABLE cast : vector_of_unsigned8(0 TO 6);
    VARIABLE sll_temp : vector_of_unsigned7(0 TO 6);
    VARIABLE mul_temp : vector_of_unsigned14(0 TO 6);
    VARIABLE cast_0 : vector_of_unsigned8(0 TO 6);
    VARIABLE sll_temp_0 : vector_of_unsigned7(0 TO 6);
  BEGIN
    yy := to_unsigned(16#00#, 7);

    FOR ii IN 6 DOWNTO 0 LOOP
      cast(ii) := unsigned(to_signed(ii, 32)(7 DOWNTO 0));
      sll_temp(ii) := to_unsigned(16#01#, 7) sll to_integer(cast(ii));
      tmp21 := yy OR sll_temp(ii);
      mul_temp(ii) := tmp21 * tmp21;
      IF mul_temp(ii) <= tmp_20 THEN 
        cast_0(ii) := unsigned(to_signed(ii, 32)(7 DOWNTO 0));
        sll_temp_0(ii) := to_unsigned(16#01#, 7) sll to_integer(cast_0(ii));
        y_0 := yy OR sll_temp_0(ii);
      ELSE 
        y_0 := yy;
      END IF;
      yy := y_0;
    END LOOP;

    y_y_2 <= yy;
  END PROCESS p1_output;


  tmp_22 <= c0_serialOut_0_1(1);

  tmp_23 <= tmp_22(27 DOWNTO 0);

  tmp_24 <= resize(tmp_23, 30);

  tmp_25 <= tmp_18 + tmp_24;

  tmp_20 <= unsigned(tmp_25(27 DOWNTO 14));

  
  tmp_26 <= '1' WHEN tmp_20 = to_unsigned(16#0000#, 14) ELSE
      '0';

  
  tmp_19 <= y_y_2 WHEN tmp_26 = '0' ELSE
      y_y_1;

  -- HDL code generation from MATLAB function: Madgwick_normalize_fixpt_trueregionp72
  
  tmp_27 <= '1' WHEN tmp_19 = to_unsigned(16#00#, 7) ELSE
      '0';

  
  tmp_28 <= c_c_8 WHEN tmp_27 = '0' ELSE
      c_c_7;

  -- HDL code generation from MATLAB function: Madgwick_normalize_fixpt_trueregionp64
  -- 
  -- HDL code generation from MATLAB function: Madgwick_normalize_fixpt_trueregionp66
  -- 
  -- HDL code generation from MATLAB function: Madgwick_normalize_fixpt_trueregionp68
  
  tmp_29 <= tmp_11 WHEN tmp_1 = '0' ELSE
      tmp_28;

  tmp_30 <= tmp_29(19 DOWNTO 6);

  recipNorm <= signed(resize(tmp_30, 15));

  c0_serial_1_1(0) <= az_8;
  c0_serial_1_1(1) <= az_9;
  c0_serial_1_1(2) <= a0_4;
  c0_serial_1_1(3) <= recipNorm;

  rcc_out_4 <= c0_serial_1_1;

  ratechange_splitcomp_out0_4 <= rcc_out_4(0);

  
  az_10 <= ratechange_splitcomp_out0_4 WHEN counterSig_1 = to_unsigned(16#0#, 2) ELSE
      ratechange_splitcomp_out1_4 WHEN counterSig_1 = to_unsigned(16#1#, 2) ELSE
      ratechange_splitcomp_out2_3 WHEN counterSig_1 = to_unsigned(16#2#, 2) ELSE
      ratechange_splitcomp_out3_3;

  multiplier_mul_temp <= az_7 * az_10;
  tmp_31 <= multiplier_mul_temp(28 DOWNTO 0);

  alpha0_deserializer_tapDelayComp_1_p : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      alpha0_deserializer_tapout_1 <= (OTHERS => to_signed(16#00000000#, 29));
    ELSIF rising_edge(clk) THEN
      IF enb = '1' AND alpha0_deserializer_tapDelayEn_5 = '1' THEN
        alpha0_deserializer_tapout_1(2) <= tmp_31;
        alpha0_deserializer_tapout_1(0 TO 1) <= alpha0_deserializer_tapout_1(1 TO 2);
      END IF;
    END IF;
  END PROCESS alpha0_deserializer_tapDelayComp_1_p;


  alpha0_deserializer_muxOut_1(0) <= alpha0_deserializer_tapout_1(0);
  alpha0_deserializer_muxOut_1(1) <= alpha0_deserializer_tapout_1(1);
  alpha0_deserializer_muxOut_1(2) <= alpha0_deserializer_tapout_1(2);
  alpha0_deserializer_muxOut_1(3) <= tmp_31;

  alpha0_deserializer_regComp_1_proces : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      c0_serialOut_0_1 <= (OTHERS => to_signed(16#00000000#, 29));
    ELSIF rising_edge(clk) THEN
      IF enb = '1' AND alpha0_deserializer_innerRegEn_2 = '1' THEN
        c0_serialOut_0_1 <= alpha0_deserializer_muxOut_1;
      END IF;
    END IF;
  END PROCESS alpha0_deserializer_regComp_1_proces;


  delayMatch_5_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      tmp_32 <= to_signed(16#00000000#, 30);
    ELSIF rising_edge(clk) THEN
      IF enb_1_4_0 = '1' THEN
        tmp_32 <= tmp_9;
      END IF;
    END IF;
  END PROCESS delayMatch_5_process;


  tmp_33 <= c0_serialOut_0_1(0);

  tmp_34 <= tmp_33(27 DOWNTO 0);

  tmp_35 <= resize(tmp_34, 30);

  tmp_36 <= tmp_32 + tmp_35;

  tmp_37 <= resize(tmp_36, 31);

  tmp_38 <= c0_serialOut_0_1(2);

  tmp_39 <= tmp_38(27 DOWNTO 0);

  tmp_40 <= resize(tmp_39, 31);

  tmp_41 <= tmp_37 + tmp_40;

  
  tmp_42 <= '1' WHEN tmp_41 <= to_signed(16#00000000#, 31) ELSE
      '0';

  -- HDL code generation from MATLAB function: Madgwick_normalize_fixpt_falseregionp77
  p1_2_output : PROCESS (tmp_41)
    VARIABLE yy1 : signed(15 DOWNTO 0);
    VARIABLE tmp43 : signed(15 DOWNTO 0);
    VARIABLE y_01 : signed(15 DOWNTO 0);
    VARIABLE cast1 : vector_of_unsigned8(0 TO 14);
    VARIABLE sll_temp1 : vector_of_signed16(0 TO 14);
    VARIABLE mul_temp1 : vector_of_signed32(0 TO 14);
    VARIABLE cast_01 : vector_of_signed32(0 TO 14);
    VARIABLE cast_1 : vector_of_unsigned8(0 TO 14);
    VARIABLE sll_temp_01 : vector_of_signed16(0 TO 14);
  BEGIN
    yy1 := to_signed(16#0000#, 16);

    FOR ii1 IN 14 DOWNTO 0 LOOP
      cast1(ii1) := unsigned(to_signed(ii1, 32)(7 DOWNTO 0));
      sll_temp1(ii1) := to_signed(16#0001#, 16) sll to_integer(cast1(ii1));
      tmp43 := yy1 OR sll_temp1(ii1);
      mul_temp1(ii1) := tmp43 * tmp43;
      cast_01(ii1) := resize(tmp_41, 32);
      IF mul_temp1(ii1) <= cast_01(ii1) THEN 
        cast_1(ii1) := unsigned(to_signed(ii1, 32)(7 DOWNTO 0));
        sll_temp_01(ii1) := to_signed(16#0001#, 16) sll to_integer(cast_1(ii1));
        y_01 := yy1 OR sll_temp_01(ii1);
      ELSE 
        y_01 := yy1;
      END IF;
      yy1 := y_01;
    END LOOP;

    y_y_3 <= yy1;
  END PROCESS p1_2_output;


  -- HDL code generation from MATLAB function: Madgwick_normalize_fixpt_trueregionp77
  y_y_4 <= to_signed(16#0000#, 16);

  delayMatch_6_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      delayMatch_reg_2 <= (OTHERS => to_signed(16#0000#, 16));
    ELSIF rising_edge(clk) THEN
      IF enb_1_4_0 = '1' THEN
        delayMatch_reg_2(0) <= y_y_4;
        delayMatch_reg_2(1) <= delayMatch_reg_2(0);
      END IF;
    END IF;
  END PROCESS delayMatch_6_process;

  y_y_5 <= delayMatch_reg_2(1);

  
  tmp_44 <= y_y_3 WHEN tmp_42 = '0' ELSE
      y_y_5;

  -- HDL code generation from MATLAB function: Madgwick_normalize_fixpt_falseregionp74
  
  tmp_45 <= '1' WHEN tmp_44 = to_signed(16#0000#, 16) ELSE
      '0';

  -- HDL code generation from MATLAB function: Madgwick_normalize_fixpt_falseregionp74_falseregionp1
  
  p0c_div_temp_1 <= C_divbyzero_p_2 WHEN tmp_44 = 0 ELSE
      One_2 / tmp_44;
  c_c_15 <= resize(p0c_div_temp_1, 36);

  -- HDL code generation from MATLAB function: Madgwick_normalize_fixpt_falseregionp74_trueregionp1
  c_c_16 <= signed'(X"7FFFFFFFF");

  delayMatch_7_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      delayMatch_reg_3 <= (OTHERS => to_signed(0, 36));
    ELSIF rising_edge(clk) THEN
      IF enb_1_4_0 = '1' THEN
        delayMatch_reg_3(0) <= c_c_16;
        delayMatch_reg_3(1) <= delayMatch_reg_3(0);
      END IF;
    END IF;
  END PROCESS delayMatch_7_process;

  c_c_17 <= delayMatch_reg_3(1);

  
  tmp_46 <= c_c_15 WHEN tmp_45 = '0' ELSE
      c_c_17;

  -- HDL code generation from MATLAB function: Madgwick_normalize_fixpt
  tmp_47 <= to_signed(0, 36);

  delayMatch_8_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      delayMatch_reg_4 <= (OTHERS => to_signed(0, 36));
    ELSIF rising_edge(clk) THEN
      IF enb_1_4_0 = '1' THEN
        delayMatch_reg_4(0) <= tmp_47;
        delayMatch_reg_4(1) <= delayMatch_reg_4(0);
      END IF;
    END IF;
  END PROCESS delayMatch_8_process;

  tmp_48 <= delayMatch_reg_4(1);

  -- HDL code generation from MATLAB function: Madgwick_normalize_fixpt_falseregionp58
  -- 
  -- HDL code generation from MATLAB function: Madgwick_normalize_fixpt_falseregionp61
  -- 
  -- HDL code generation from MATLAB function: Madgwick_normalize_fixpt_falseregionp52
  -- 
  -- HDL code generation from MATLAB function: Madgwick_normalize_fixpt_falseregionp55
  
  tmp_49 <= tmp_46 WHEN tmp_1 = '0' ELSE
      tmp_48;

  tmp_50 <= unsigned(tmp_49(19 DOWNTO 6));

  tmp_51 <= unsigned(tmp_49(19 DOWNTO 6));

  c0_serial_1_2(0) <= tmp_50;
  c0_serial_1_2(1) <= tmp_51;

  rcc_out_5 <= c0_serial_1_2;

  ratechange_splitcomp_out0_5 <= rcc_out_5(0);

  ratechange_splitcomp_out1_5 <= rcc_out_5(1);

  
  recipNorm_1 <= ratechange_splitcomp_out0_5 WHEN counterSig = '0' ELSE
      ratechange_splitcomp_out1_5;

  multiplier_cast <= signed(resize(recipNorm_1, 15));
  multiplier_mul_temp_1 <= ay_3 * multiplier_cast;
  tmp_52 <= multiplier_mul_temp_1(27 DOWNTO 0);

  alpha0_deserializer_tapDelayComp_2_p : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      alpha0_deserializer_tapout_2 <= to_signed(16#0000000#, 28);
    ELSIF rising_edge(clk) THEN
      IF enb_1_2_0 = '1' AND alpha0_deserializer_tapDelayEn_1 = '1' THEN
        alpha0_deserializer_tapout_2 <= tmp_52;
      END IF;
    END IF;
  END PROCESS alpha0_deserializer_tapDelayComp_2_p;


  alpha0_deserializer_muxOut_2(0) <= alpha0_deserializer_tapout_2;
  alpha0_deserializer_muxOut_2(1) <= tmp_52;

  alpha0_deserializer_regComp_2_proces : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      c0_serialOut_0_2 <= (OTHERS => to_signed(16#0000000#, 28));
    ELSIF rising_edge(clk) THEN
      IF enb_1_2_0 = '1' AND alpha0_deserializer_innerRegEn = '1' THEN
        c0_serialOut_0_2 <= alpha0_deserializer_muxOut_2;
      END IF;
    END IF;
  END PROCESS alpha0_deserializer_regComp_2_proces;


  tmp_53 <= c0_serialOut_0_2(1);

  tmp_54 <= resize(tmp_53(27 DOWNTO 18), 14);

  tmp_55 <= to_signed(16#0000#, 14);

  delayMatch_9_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      delayMatch_reg_5 <= (OTHERS => to_signed(16#0000#, 14));
    ELSIF rising_edge(clk) THEN
      IF enb_1_4_0 = '1' THEN
        delayMatch_reg_5(0) <= tmp_55;
        delayMatch_reg_5(1 TO 2) <= delayMatch_reg_5(0 TO 1);
      END IF;
    END IF;
  END PROCESS delayMatch_9_process;

  tmp_56 <= delayMatch_reg_5(2);

  p13tmp_cast <= tmp_20 & '0' & '0' & '0' & '0';
  
  tmp_57 <= '1' WHEN p13tmp_cast /= to_unsigned(16#00000#, 18) ELSE
      '0';

  delayMatch_10_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      tmp_58 <= '0';
    ELSIF rising_edge(clk) THEN
      IF enb_1_4_0 = '1' THEN
        tmp_58 <= tmp_57;
      END IF;
    END IF;
  END PROCESS delayMatch_10_process;


  alpha0_deserializer_contl_3_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      alpha0_deserializer_contl_cnt_3 <= to_unsigned(16#0#, 3);
    ELSIF rising_edge(clk) THEN
      IF enb = '1' THEN
        IF alpha0_deserializer_contl_cnt_3 = to_unsigned(16#3#, 3) THEN 
          alpha0_deserializer_contl_cnt_3 <= to_unsigned(16#0#, 3);
        ELSE 
          alpha0_deserializer_contl_cnt_3 <= alpha0_deserializer_contl_cnt_3 + to_unsigned(16#1#, 3);
        END IF;
      END IF;
    END IF;
  END PROCESS alpha0_deserializer_contl_3_process;

  alpha0_deserializer_tapDelayEn_6 <= hdlcoder_to_stdlogic(alpha0_deserializer_contl_cnt_3 < 
    to_unsigned(16#3#, 3));
  
  alpha0_deserializer_contl_validOutpu_3 <= '1' WHEN alpha0_deserializer_contl_cnt_3 = to_unsigned(16#3#, 3) 
    ELSE
      '0';
  
  alpha0_deserializer_innerRegEn_3 <= '1' WHEN alpha0_deserializer_contl_validOutpu_3 = '1' ELSE
      '0';
  
  alpha0_deserializer_innerRegCtrolEn_3 <= '1' WHEN alpha0_deserializer_contl_validOutpu_3 = '1' ELSE
      '0';
  alpha0_deserializer_outBypassEn_3 <= '1';

  alpha0_deserializer_tapDelayEn_7 <= enb AND alpha0_deserializer_tapDelayEn_6;

  reduced_6_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      a0_5 <= to_signed(16#0000#, 14);
    ELSIF rising_edge(clk) THEN
      IF enb_1_4_0 = '1' THEN
        a0_5 <= a0_2;
      END IF;
    END IF;
  END PROCESS reduced_6_process;


  reduced_7_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      az_11 <= to_signed(16#0000#, 14);
    ELSIF rising_edge(clk) THEN
      IF enb_1_4_0 = '1' THEN
        az_11 <= az_2;
      END IF;
    END IF;
  END PROCESS reduced_7_process;


  c0_serial_0_3(0) <= ay_2;
  c0_serial_0_3(1) <= ax_2;
  c0_serial_0_3(2) <= a0_5;
  c0_serial_0_3(3) <= az_11;

  rcc_out_6 <= c0_serial_0_3;

  ratechange_splitcomp_out0_6 <= rcc_out_6(0);

  ratechange_splitcomp_out1_6 <= rcc_out_6(1);

  ratechange_splitcomp_out2_4 <= rcc_out_6(2);

  ratechange_splitcomp_out3_4 <= rcc_out_6(3);

  
  ay_4 <= ratechange_splitcomp_out0_6 WHEN counterSig_1 = to_unsigned(16#0#, 2) ELSE
      ratechange_splitcomp_out1_6 WHEN counterSig_1 = to_unsigned(16#1#, 2) ELSE
      ratechange_splitcomp_out2_4 WHEN counterSig_1 = to_unsigned(16#2#, 2) ELSE
      ratechange_splitcomp_out3_4;

  tmp_59 <= tmp_29(19 DOWNTO 6);

  tmp_60 <= tmp_29(19 DOWNTO 6);

  tmp_61 <= unsigned(tmp_49(19 DOWNTO 6));

  tmp_62 <= unsigned(tmp_49(19 DOWNTO 6));

  c0_serial_1_3(0) <= tmp_59;
  c0_serial_1_3(1) <= tmp_60;
  c0_serial_1_3(2) <= tmp_61;
  c0_serial_1_3(3) <= tmp_62;

  rcc_out_7 <= c0_serial_1_3;

  ratechange_splitcomp_out0_7 <= rcc_out_7(0);

  ratechange_splitcomp_out1_7 <= rcc_out_7(1);

  ratechange_splitcomp_out2_5 <= rcc_out_7(2);

  ratechange_splitcomp_out3_5 <= rcc_out_7(3);

  
  recipNorm_2 <= ratechange_splitcomp_out0_7 WHEN counterSig_1 = to_unsigned(16#0#, 2) ELSE
      ratechange_splitcomp_out1_7 WHEN counterSig_1 = to_unsigned(16#1#, 2) ELSE
      ratechange_splitcomp_out2_5 WHEN counterSig_1 = to_unsigned(16#2#, 2) ELSE
      ratechange_splitcomp_out3_5;

  multiplier_cast_1 <= signed(resize(recipNorm_2, 15));
  multiplier_mul_temp_2 <= ay_4 * multiplier_cast_1;
  tmp_63 <= multiplier_mul_temp_2(27 DOWNTO 0);

  alpha0_deserializer_tapDelayComp_3_p : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      alpha0_deserializer_tapout_3 <= (OTHERS => to_signed(16#0000000#, 28));
    ELSIF rising_edge(clk) THEN
      IF enb = '1' AND alpha0_deserializer_tapDelayEn_7 = '1' THEN
        alpha0_deserializer_tapout_3(2) <= tmp_63;
        alpha0_deserializer_tapout_3(0 TO 1) <= alpha0_deserializer_tapout_3(1 TO 2);
      END IF;
    END IF;
  END PROCESS alpha0_deserializer_tapDelayComp_3_p;


  alpha0_deserializer_muxOut_3(0) <= alpha0_deserializer_tapout_3(0);
  alpha0_deserializer_muxOut_3(1) <= alpha0_deserializer_tapout_3(1);
  alpha0_deserializer_muxOut_3(2) <= alpha0_deserializer_tapout_3(2);
  alpha0_deserializer_muxOut_3(3) <= tmp_63;

  alpha0_deserializer_regComp_3_proces : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      c0_serialOut_0_3 <= (OTHERS => to_signed(16#0000000#, 28));
    ELSIF rising_edge(clk) THEN
      IF enb = '1' AND alpha0_deserializer_innerRegEn_3 = '1' THEN
        c0_serialOut_0_3 <= alpha0_deserializer_muxOut_3;
      END IF;
    END IF;
  END PROCESS alpha0_deserializer_regComp_3_proces;


  reduced_8_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      ax_5 <= to_signed(16#0000#, 14);
    ELSIF rising_edge(clk) THEN
      IF enb_1_4_0 = '1' THEN
        ax_5 <= ax_2;
      END IF;
    END IF;
  END PROCESS reduced_8_process;


  tmp_64 <= c0_serialOut_0_3(1);

  -- HDL code generation from MATLAB function: Madgwick_normalize_fixpt_trueregionp68_trueregionp11
  tmp_65 <= resize(tmp_64(27 DOWNTO 18), 14);

  
  tmp_66 <= ax_5 WHEN tmp_58 = '0' ELSE
      tmp_65;

  -- HDL code generation from MATLAB function: Madgwick_normalize_fixpt_trueregionp61
  
  tmp_67 <= tmp_56 WHEN tmp_2 = '0' ELSE
      tmp_66;

  
  tmp_68 <= tmp_54 WHEN tmp_2 = '0' ELSE
      tmp_67;

  ax_reg_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      ax_tmp <= to_signed(16#0000#, 14);
    ELSIF rising_edge(clk) THEN
      IF enb_1_4_0 = '1' THEN
        ax_tmp <= tmp_68;
      END IF;
    END IF;
  END PROCESS ax_reg_process;


  ax <= std_logic_vector(ax_tmp);

  tmp_69 <= c0_serialOut_0_2(0);

  tmp_70 <= resize(tmp_69(27 DOWNTO 18), 14);

  tmp_71 <= to_signed(16#0000#, 14);

  delayMatch_11_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      delayMatch_reg_6 <= (OTHERS => to_signed(16#0000#, 14));
    ELSIF rising_edge(clk) THEN
      IF enb_1_4_0 = '1' THEN
        delayMatch_reg_6(0) <= tmp_71;
        delayMatch_reg_6(1 TO 2) <= delayMatch_reg_6(0 TO 1);
      END IF;
    END IF;
  END PROCESS delayMatch_11_process;

  tmp_72 <= delayMatch_reg_6(2);

  p13tmp_cast_1 <= tmp_20 & '0' & '0' & '0' & '0';
  
  tmp_73 <= '1' WHEN p13tmp_cast_1 /= to_unsigned(16#00000#, 18) ELSE
      '0';

  delayMatch_12_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      tmp_74 <= '0';
    ELSIF rising_edge(clk) THEN
      IF enb_1_4_0 = '1' THEN
        tmp_74 <= tmp_73;
      END IF;
    END IF;
  END PROCESS delayMatch_12_process;


  reduced_9_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      ay_5 <= to_signed(16#0000#, 14);
    ELSIF rising_edge(clk) THEN
      IF enb_1_4_0 = '1' THEN
        ay_5 <= ay_2;
      END IF;
    END IF;
  END PROCESS reduced_9_process;


  tmp_75 <= c0_serialOut_0_3(0);

  -- HDL code generation from MATLAB function: Madgwick_normalize_fixpt_trueregionp66_trueregionp11
  tmp_76 <= resize(tmp_75(27 DOWNTO 18), 14);

  
  tmp_77 <= ay_5 WHEN tmp_74 = '0' ELSE
      tmp_76;

  -- HDL code generation from MATLAB function: Madgwick_normalize_fixpt_trueregionp58
  
  tmp_78 <= tmp_72 WHEN tmp_2 = '0' ELSE
      tmp_77;

  
  tmp_79 <= tmp_70 WHEN tmp_2 = '0' ELSE
      tmp_78;

  ay_reg_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      ay_tmp <= to_signed(16#0000#, 14);
    ELSIF rising_edge(clk) THEN
      IF enb_1_4_0 = '1' THEN
        ay_tmp <= tmp_79;
      END IF;
    END IF;
  END PROCESS ay_reg_process;


  ay <= std_logic_vector(ay_tmp);

  tmp_80 <= c0_serialOut_0_3(3);

  tmp_81 <= resize(tmp_80(27 DOWNTO 18), 14);

  tmp_82 <= to_signed(16#0000#, 14);

  delayMatch_13_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      delayMatch_reg_7 <= (OTHERS => to_signed(16#0000#, 14));
    ELSIF rising_edge(clk) THEN
      IF enb_1_4_0 = '1' THEN
        delayMatch_reg_7(0) <= tmp_82;
        delayMatch_reg_7(1 TO 2) <= delayMatch_reg_7(0 TO 1);
      END IF;
    END IF;
  END PROCESS delayMatch_13_process;

  tmp_83 <= delayMatch_reg_7(2);

  p13tmp_cast_2 <= tmp_20 & '0' & '0' & '0' & '0';
  
  tmp_84 <= '1' WHEN p13tmp_cast_2 /= to_unsigned(16#00000#, 18) ELSE
      '0';

  delayMatch_14_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      tmp_85 <= '0';
    ELSIF rising_edge(clk) THEN
      IF enb_1_4_0 = '1' THEN
        tmp_85 <= tmp_84;
      END IF;
    END IF;
  END PROCESS delayMatch_14_process;


  reduced_10_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      az_12 <= to_signed(16#0000#, 14);
    ELSIF rising_edge(clk) THEN
      IF enb_1_4_0 = '1' THEN
        az_12 <= az_11;
      END IF;
    END IF;
  END PROCESS reduced_10_process;


  tmp_86 <= c0_serialOut_0_1(3);

  tmp_87 <= tmp_86(27 DOWNTO 0);

  -- HDL code generation from MATLAB function: Madgwick_normalize_fixpt_trueregionp64_trueregionp11
  tmp_88 <= resize(tmp_87(27 DOWNTO 18), 14);

  
  tmp_89 <= az_12 WHEN tmp_85 = '0' ELSE
      tmp_88;

  -- HDL code generation from MATLAB function: Madgwick_normalize_fixpt_trueregionp55
  
  tmp_90 <= tmp_83 WHEN tmp_2 = '0' ELSE
      tmp_89;

  
  tmp_91 <= tmp_81 WHEN tmp_2 = '0' ELSE
      tmp_90;

  az_reg_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      az_tmp <= to_signed(16#0000#, 14);
    ELSIF rising_edge(clk) THEN
      IF enb_1_4_0 = '1' THEN
        az_tmp <= tmp_91;
      END IF;
    END IF;
  END PROCESS az_reg_process;


  az <= std_logic_vector(az_tmp);

  tmp_92 <= c0_serialOut_0_3(2);

  tmp_93 <= resize(tmp_92(27 DOWNTO 18), 14);

  tmp_94 <= to_signed(16#0000#, 14);

  delayMatch_15_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      delayMatch_reg_8 <= (OTHERS => to_signed(16#0000#, 14));
    ELSIF rising_edge(clk) THEN
      IF enb_1_4_0 = '1' THEN
        delayMatch_reg_8(0) <= tmp_94;
        delayMatch_reg_8(1) <= delayMatch_reg_8(0);
      END IF;
    END IF;
  END PROCESS delayMatch_15_process;

  tmp_95 <= delayMatch_reg_8(1);

  -- HDL code generation from MATLAB function: Madgwick_normalize_fixpt_trueregionp70
  p3tmp_cast <= tmp_20 & '0' & '0' & '0' & '0';
  
  tmp_96 <= '1' WHEN p3tmp_cast /= to_unsigned(16#00000#, 18) ELSE
      '0';

  -- HDL code generation from MATLAB function: Madgwick_normalize_fixpt_trueregionp70_trueregionp1
  a0_6 <= to_signed(16#0000#, 14);

  delayMatch_16_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      delayMatch_reg_9 <= (OTHERS => to_signed(16#0000#, 14));
    ELSIF rising_edge(clk) THEN
      IF enb_1_4_0 = '1' THEN
        delayMatch_reg_9(0) <= a0_6;
        delayMatch_reg_9(1) <= delayMatch_reg_9(0);
      END IF;
    END IF;
  END PROCESS delayMatch_16_process;

  a0_7 <= delayMatch_reg_9(1);

  
  tmp_97 <= a0_5 WHEN tmp_96 = '0' ELSE
      a0_7;

  -- HDL code generation from MATLAB function: Madgwick_normalize_fixpt_trueregionp52
  
  tmp_98 <= tmp_95 WHEN tmp_1 = '0' ELSE
      tmp_97;

  delayMatch_17_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      a0_8 <= to_signed(16#0000#, 14);
    ELSIF rising_edge(clk) THEN
      IF enb_1_4_0 = '1' THEN
        a0_8 <= tmp_98;
      END IF;
    END IF;
  END PROCESS delayMatch_17_process;


  
  tmp_99 <= tmp_93 WHEN tmp_2 = '0' ELSE
      a0_8;

  a0_reg_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      a0_tmp <= to_signed(16#0000#, 14);
    ELSIF rising_edge(clk) THEN
      IF enb_1_4_0 = '1' THEN
        a0_tmp <= tmp_99;
      END IF;
    END IF;
  END PROCESS a0_reg_process;


  a0 <= std_logic_vector(a0_tmp);

  ce_out <= enb_1_4_1;

END rtl;

